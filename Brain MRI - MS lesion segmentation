{"metadata":{"colab":{"provenance":[],"gpuType":"T4","collapsed_sections":["MoJ7NlOxssOY","RY13zVuozHYM"]},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"accelerator":"GPU","kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9361018,"sourceType":"datasetVersion","datasetId":5675787}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## images unique shapes","metadata":{"id":"qPjEPiUUra_S"}},{"cell_type":"code","source":"import os\nimport nibabel as nib\nimport numpy as np\nfrom tqdm import tqdm\n\ndef print_unique_shapes_and_values(folder_path):\n  mask_values = []\n  mask_shape = []\n  mri_shape = []\n\n  for filename in tqdm(os.listdir(folder_path)):\n    for f in os.listdir(os.path.join(folder_path, filename)):\n        if f.endswith(\"_lesion.nii\"):\n          file_path = os.path.join(folder_path, filename,f)\n          mask_img = nib.load(file_path)\n          mask_data = mask_img.get_fdata()\n          mask_shape.append(mask_data.shape)\n          mask_values.append(np.unique(mask_data))\n        elif f.endswith(\"_flair.nii\"):\n          file_path = os.path.join(folder_path, filename,f)\n          mri_img = nib.load(file_path)\n          mri_data = mri_img.get_fdata()\n          mri_shape.append(mri_data.shape)\n\n  unique_shapes = set(mask_shape)\n  for shape in unique_shapes:\n      print(f\"\\n Masks unique Shape: {shape}\")\n\n  unique_shapes = set(mri_shape)\n  for shape in unique_shapes:\n      print(f\"Images unique Shape: {shape}\")\n\n  unique_values = set(tuple(sorted(value)) for value in mask_values)\n  for value in unique_values:\n      print(f\"mask Values: {value}\")\n\nprint_unique_shapes_and_values('/kaggle/input/ms-segmentation/content/data')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"66PbDxF0zHSc","outputId":"cc50d27d-9e70-4595-c86b-ac2298870ac2","execution":{"iopub.status.busy":"2024-09-10T17:29:19.302962Z","iopub.execute_input":"2024-09-10T17:29:19.303365Z","iopub.status.idle":"2024-09-10T17:30:30.201217Z","shell.execute_reply.started":"2024-09-10T17:29:19.303325Z","shell.execute_reply":"2024-09-10T17:30:30.197634Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"100%|██████████| 70/70 [01:10<00:00,  1.01s/it]","output_type":"stream"},{"name":"stdout","text":"\n Masks unique Shape: (181, 217, 181)\nImages unique Shape: (181, 217, 181)\nmask Values: (0.0, 1.0, 2.0, 3.0, 4.0)\nmask Values: (0.0, 1.0, 2.0, 3.0)\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"markdown","source":"##  Lesion Mask locations","metadata":{"id":"MoJ7NlOxssOY"}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nmask_threshold = mask_data > 0\n\nx, y, z = np.where(mask_threshold)\n\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_subplot(111, projection='3d')\n\nax.scatter(x, y, z, c=mask_data[mask_threshold], cmap='viridis', s=1)\n\nax.set_xlabel('X axis')\nax.set_ylabel('Y axis')\nax.set_zlabel('Z axis')\n\nax.set_title(\"3D MS Lesion Mask Visualization\")\n\nplt.show()\n","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":829},"id":"r6jnDqRUs4YS","outputId":"5904db48-1b26-469e-8c9d-1d0973ab63a2"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\nunique_values, counts = np.unique(mask_data, return_counts=True)\n\nnon_zero_indices = unique_values != 0.0\nunique_values = unique_values[non_zero_indices]\ncounts = counts[non_zero_indices]\n\nplt.bar(unique_values, counts)\nplt.xlabel(\"abnormality class\")\nplt.ylabel(\"Number of pixels\")\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"kqsqwJZ_UaKk","outputId":"09ed87f0-6edf-401c-90e0-3084c1ac0fb8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"## overlay the mask on raw image\n\n","metadata":{"id":"RY13zVuozHYM"}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\ndef show_mask_slice(slice_num, folder_num):\n\n  mri_data = nib.load(f'/content/data/{folder_num:02d}/{folder_num}_rr_mni_flair.nii').get_fdata()\n  mask_data = nib.load(f'/content/data/{folder_num:02d}/{folder_num}_rr_mni_lesion.nii').get_fdata()\n\n  axial_mri_slice = mri_data[:, :, slice_num]\n  axial_mask_slice = mask_data[:, :, slice_num]\n  coronal_mri_slice = mri_data[:, slice_num, :]\n  coronal_mask_slice = mask_data[:, slice_num, :]\n  sagittal_mri_slice = mri_data[slice_num, :, :]\n  sagittal_mask_slice = mask_data[slice_num, :, :]\n\n\n  cmap = plt.get_cmap('jet', 4)\n\n  fig, ax = plt.subplots(1, 3, figsize=(20, 5))\n\n  ax[0].imshow(axial_mri_slice.T, cmap='gray', origin='lower')\n  im0 = ax[0].imshow(np.ma.masked_where(axial_mask_slice == 0, axial_mask_slice).T, cmap=cmap, origin='lower', alpha=0.5) #assign return value of imshow to variable\n  ax[0].set_title(\"Sagittal Plane\")\n\n  ax[1].imshow(coronal_mri_slice.T, cmap='gray', origin='lower')\n  im1 = ax[1].imshow(np.ma.masked_where(coronal_mask_slice == 0, coronal_mask_slice).T, cmap=cmap, origin='lower', alpha=0.5) #assign return value of imshow to variable\n  ax[1].set_title(\"Coronal Plane\")\n\n  ax[2].imshow(sagittal_mri_slice.T, cmap='gray', origin='lower')\n  im2 = ax[2].imshow(np.ma.masked_where(sagittal_mask_slice == 0, sagittal_mask_slice).T, cmap=cmap, origin='lower', alpha=0.5) #assign return value of imshow to variable\n  ax[2].set_title(\"axial Plane\")\n\n  plt.colorbar(im2, ticks=[1, 2, 3, 4], label=\"MS Lesion Classes\")\n  plt.show()","metadata":{"id":"BuHqOdrWzVLG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_mask_slice(slice_num=120, folder_num=2)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":434},"id":"sTUjsQ5HHZ7x","outputId":"11ac25bb-90c7-4506-a7c8-53aa641d5283"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":"# data preparation","metadata":{"id":"G1q3tbKwpMkf"}},{"cell_type":"code","source":"!pip install monai","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IXQo5EbVqfx7","outputId":"0d7a3cb9-73a0-4545-ae58-5747b7ede6d1","execution":{"iopub.status.busy":"2024-10-02T18:37:17.421825Z","iopub.execute_input":"2024-10-02T18:37:17.422255Z","iopub.status.idle":"2024-10-02T18:37:30.600652Z","shell.execute_reply.started":"2024-10-02T18:37:17.422209Z","shell.execute_reply":"2024-10-02T18:37:30.599507Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Requirement already satisfied: monai in /opt/conda/lib/python3.10/site-packages (1.3.2)\nRequirement already satisfied: torch>=1.9 in /opt/conda/lib/python3.10/site-packages (from monai) (2.4.0)\nRequirement already satisfied: numpy>=1.20 in /opt/conda/lib/python3.10/site-packages (from monai) (1.26.4)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.9->monai) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch>=1.9->monai) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.9->monai) (1.13.2)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.9->monai) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.9->monai) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.9->monai) (2024.6.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.9->monai) (2.1.5)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.9->monai) (1.3.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"from monai.transforms import ( Compose, LoadImageD, EnsureChannelFirstD, ScaleIntensityD, EnsureTyped, EnsureType, ToTensor, Activations, RandRotateD,ToTensord,\n                           AsDiscrete ,  AsDiscreteD, ActivationsD, Spacing, Orientation, RandSpatialCropD, RandRotate90D, RandFlipD, ResizeD, Lambda, MapTransform)\nfrom monai.data import CacheDataset, DataLoader, PersistentDataset\nfrom monai.metrics import DiceMetric\nfrom monai.networks.nets import UNet\nfrom monai.inferers import SlidingWindowInferer, sliding_window_inference\nfrom monai.losses import DiceLoss\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-10-02T18:37:30.602150Z","iopub.execute_input":"2024-10-02T18:37:30.602512Z","iopub.status.idle":"2024-10-02T18:37:30.609586Z","shell.execute_reply.started":"2024-10-02T18:37:30.602468Z","shell.execute_reply":"2024-10-02T18:37:30.608654Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"import os\nimport random\n\ndef split_data(num_samples):\n  image_paths = []\n  mask_paths = []\n\n  for i in range(1,71):\n    image_paths.append(os.path.join('/kaggle/input/ms-segmentation/content/data', f'{i:02d}', f'{i}_rr_mni_flair.nii'))\n    mask_paths.append(os.path.join('/kaggle/input/ms-segmentation/content/data', f'{i:02d}', f'{i}_rr_mni_lesion.nii'))\n\n  sample_indices = random.sample(range(len(image_paths)), num_samples)\n\n  train_files = [{\"image\": image_paths[i], \"mask\": mask_paths[i]} for i in sample_indices]\n  valid_files = [{\"image\": image_paths[i], \"mask\": mask_paths[i]} for i in range(len(image_paths)) if i not in sample_indices]\n\n  return train_files, valid_files","metadata":{"id":"4K79z1QhqeZb","execution":{"iopub.status.busy":"2024-10-02T18:37:30.610837Z","iopub.execute_input":"2024-10-02T18:37:30.611121Z","iopub.status.idle":"2024-10-02T18:37:30.620068Z","shell.execute_reply.started":"2024-10-02T18:37:30.611090Z","shell.execute_reply":"2024-10-02T18:37:30.619271Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"transform = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),\n                            EnsureChannelFirstD(keys=[\"image\", \"mask\"]),EnsureTyped(keys=[\"image\", \"mask\"])])\n\ntrain_files, valid_files = split_data(60)\n\ntrain_ds = PersistentDataset(data=train_files, transform=transform, cache_dir=\"./train_cache_dir\")\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4)\n\nvalid_ds = PersistentDataset(data=valid_files, transform=transform, cache_dir=\"./val_cache_dir\")\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4)","metadata":{"execution":{"iopub.status.busy":"2024-10-02T18:37:17.397649Z","iopub.execute_input":"2024-10-02T18:37:17.398006Z","iopub.status.idle":"2024-10-02T18:37:17.420551Z","shell.execute_reply.started":"2024-10-02T18:37:17.397972Z","shell.execute_reply":"2024-10-02T18:37:17.419467Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"# Unet","metadata":{"id":"OnOqPe7BvcSA"}},{"cell_type":"code","source":"from tqdm import tqdm\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 5\nmodel = UNet(spatial_dims=3, in_channels=1, out_channels=num_classes, channels=(32 ,64, 128, 256, 512),\n             strides=(2, 2, 2, 2, 1), num_res_units=5, dropout=0.2, norm='INSTANCE').to(device)\n\nloss_function = DiceLoss(include_background=True, to_onehot_y=num_classes, softmax=True)\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\n\noptimizer = torch.optim.Adam(model.parameters(), lr= 0.008)\nscheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n\ninferer = SlidingWindowInferer(roi_size=(128, 128, 64), sw_batch_size=16, overlap=0.14)\npost_pred = Compose([Activations(softmax=True), AsDiscrete(argmax=True)])\npost_label = Compose([AsDiscrete()])\n\nmax_epochs = 600\nval_interval = 1\nbest_metric = -1\nbest_metric_epoch = -1\nbest_checkpoint_path = \"v0.pth\"\nprevious_lr = optimizer.param_groups[0]['lr']\n\ntorch.cuda.empty_cache()\n\nif os.path.exists(best_checkpoint_path):\n    checkpoint = torch.load(best_checkpoint_path)\n    model.load_state_dict(checkpoint['model_state_dict'])\n    model.eval()\n    dice = 0\n    val_steps = 0\n    val_loss = 0\n    for val_data in val_loader:\n        val_steps += 1\n        val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n        val_outputs = inferer(val_inputs, model)\n        val_loss += loss_function(val_outputs, val_labels).item()\n        val_outputs = [post_pred(i) for i in val_outputs]\n        val_labels = [post_label(i) for i in val_labels]               \n        dice_metric(y_pred=val_outputs, y=val_labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n    best_metric = dice/val_steps\n    print(f'load from checkpoint with average val dice {best_metric:.4f} and average loss {(val_loss/val_steps):.4f}')\n        \nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"\\nEpoch {epoch + 1}/{max_epochs}\")\n    print(f\"Current Learning Rate = {optimizer.param_groups[0]['lr']}\")\n\n    model.train()\n    epoch_loss = 0\n    dice = 0\n    step = 0\n    \n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n        outputs = inferer(inputs, model)\n\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        epoch_loss += loss.item()\n        \n        outputs = [post_pred(i) for i in outputs]\n        labels = [post_label(i) for i in labels]\n        \n        dice_metric(y_pred=outputs, y=labels)\n        \n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n        \n    epoch_loss /= step\n    dice /= step\n    print(f\"Train Loss: {epoch_loss:.4f} <-----> Dice : {dice:.4f}\")\n\n\n\n    if (epoch + 1) % val_interval == 0:       \n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            dice = 0\n            val_steps = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n                val_outputs = inferer(val_inputs, model)\n\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                val_outputs = [post_pred(i) for i in val_outputs]\n                val_labels = [post_label(i) for i in val_labels]\n                \n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                \n            val_loss /= val_steps\n            dice_metric.reset()\n            scheduler.step(val_loss)\n            dice /= val_steps\n            print(f\"Validation loss: {val_loss:.5f} <-----> Dice:{dice:.5f}\")\n            print('==============================================================================================================')\n            \n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                torch.save({'model_state_dict': model.state_dict()}, best_checkpoint_path)\n                print(f\"                           <<<<<<<<< ====== Saved best model with dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>\")\n\nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"lKOVqbttumrI","outputId":"06634906-eae2-4fa5-9672-b5283ce9e5ac","execution":{"iopub.status.busy":"2024-10-02T19:06:01.212695Z","iopub.execute_input":"2024-10-02T19:06:01.213488Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"load from checkpoint with average val dice 0.0490 and average loss 0.7933\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1/600\nCurrent Learning Rate = 0.008\nTrain Loss: 0.7852 <-----> Dice : 0.0756\nValidation loss: 0.77250 <-----> Dice:0.10772\n==============================================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 1/600 [02:51<28:36:02, 171.89s/it]","output_type":"stream"},{"name":"stdout","text":"                           <<<<<<<<< ====== Saved best model with dice: 0.10772 ========= >>>>>>>>>>>>>>\n\nEpoch 2/600\nCurrent Learning Rate = 0.008\nTrain Loss: 0.7606 <-----> Dice : 0.1470\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 2/600 [05:43<28:28:57, 171.47s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.80012 <-----> Dice:0.00000\n==============================================================================================================\n\nEpoch 3/600\nCurrent Learning Rate = 0.008\nTrain Loss: 0.8001 <-----> Dice : 0.0000\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 3/600 [08:34<28:24:29, 171.31s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.80012 <-----> Dice:0.00000\n==============================================================================================================\n\nEpoch 4/600\nCurrent Learning Rate = 0.008\nTrain Loss: 0.8001 <-----> Dice : 0.0000\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 4/600 [11:25<28:20:52, 171.23s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.80012 <-----> Dice:0.00000\n==============================================================================================================\n\nEpoch 5/600\nCurrent Learning Rate = 0.008\nTrain Loss: 0.8001 <-----> Dice : 0.0000\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 5/600 [14:16<28:18:18, 171.26s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.80012 <-----> Dice:0.00000\n==============================================================================================================\n\nEpoch 6/600\nCurrent Learning Rate = 0.004\nTrain Loss: 0.8001 <-----> Dice : 0.0000\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 6/600 [17:07<28:15:15, 171.24s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.80012 <-----> Dice:0.00000\n==============================================================================================================\n\nEpoch 7/600\nCurrent Learning Rate = 0.004\nTrain Loss: 0.8001 <-----> Dice : 0.0000\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 7/600 [19:58<28:12:05, 171.21s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.80012 <-----> Dice:0.00000\n==============================================================================================================\n\nEpoch 8/600\nCurrent Learning Rate = 0.004\nTrain Loss: 0.8001 <-----> Dice : 0.0000\n","output_type":"stream"}]},{"cell_type":"code","source":"# kill gpu system\nimport os\nos.kill(os.getpid(), 9)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# DynUNet","metadata":{}},{"cell_type":"code","source":"train_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),  EnsureChannelFirstD(keys=[\"image\", \"mask\"])\n                            , EnsureTyped(keys=[\"image\", \"mask\"]), ResizeD(keys=[\"image\", \"mask\"], spatial_size=(184, 216, 184))])\n\nvalid_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"), EnsureChannelFirstD(keys=[\"image\", \"mask\"]),\n                               EnsureTyped(keys=[\"image\", \"mask\"]), ResizeD(keys=[\"image\", \"mask\"], spatial_size=(184, 216, 184))])\n\ntrain_files, valid_files = split_data(60)\n\ntrain_ds = CacheDataset(data=train_files, transform=train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4)\n\nvalid_ds = CacheDataset(data=valid_files, transform=train_transforms)\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4)","metadata":{"execution":{"iopub.status.busy":"2024-10-02T09:10:13.660369Z","iopub.status.idle":"2024-10-02T09:10:13.660748Z","shell.execute_reply.started":"2024-10-02T09:10:13.660556Z","shell.execute_reply":"2024-10-02T09:10:13.660574Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm\nfrom monai.networks.nets import DynUNet\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nfrom monai.inferers import SlidingWindowInferer\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 5\nmodel = DynUNet(spatial_dims=3, in_channels=1, out_channels=num_classes, filters=[16, 16, 16],\n             strides=[1, 2, 2], kernel_size=[3, 3, 3], upsample_kernel_size=[2, 2, 2], dropout=0.2).to(device)\n\nloss_function = DiceLoss(include_background=True, to_onehot_y=num_classes, softmax=True)\noptimizer = torch.optim.Adam(model.parameters()) #, lr=1e-4\nscheduler = ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=5, verbose=True)\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\n\npost_pred = Compose([Activations(softmax=True), AsDiscrete(argmax=True)])\npost_label = Compose([AsDiscrete()])\n#inferer = SlidingWindowInferer( roi_size=(128, 128, 64), sw_batch_size=1, overlap=0.14)\n\nmax_epochs = 600\nval_interval = 2\nbest_metric = -1\nbest_metric_epoch = -1\n\nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"Epoch {epoch + 1}/{max_epochs}\")\n    model.train()\n    epoch_loss = 0\n    step = 0\n    dice = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n       #outputs = inferer(inputs, model)\n        outputs = model(inputs)\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        epoch_loss += loss.item()\n\n        outputs = [post_pred(i) for i in outputs]\n        labels = [post_label(i) for i in labels]\n        dice_metric(y_pred=outputs, y=labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n\n    epoch_loss /= step\n    dice /= step\n    \n    print(f\"Average Train Loss: {epoch_loss:.4f} <-----> Average Dice score: {dice:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:     \n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            val_steps = 0\n            dice = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n               #val_outputs = inferer(val_inputs, model)\n                val_outputs = model(val_inputs)\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                val_outputs = [post_pred(i) for i in val_outputs]\n                val_labels = [post_label(i) for i in val_labels]                \n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                dice_metric.reset()\n                \n            val_loss /= val_steps\n            dice /= val_steps\n\n            print(f\"Validation loss: {val_loss:.5f} <-----> Validation Dice: {dice:.5f}\")\n            print('==============================================================================================')\n\n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                torch.save(model.state_dict(), \"v0.pth\")\n                print(f\"          <<<<<<<<< ====== Saved best model at epoch {best_metric_epoch}, best dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>           \")\n            \n           #scheduler.step(dice)\n            \nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-19T11:06:05.551940Z","iopub.execute_input":"2024-09-19T11:06:05.552665Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch 1/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 1/600 [01:39<16:31:24, 99.31s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9050 <-----> Average Dice score: 0.0025\nEpoch 2/600\nAverage Train Loss: 0.8700 <-----> Average Dice score: 0.0051\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 2/600 [03:23<16:59:23, 102.28s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.85366 <-----> Validation Dice: 0.02716\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 2, best dice: 0.02716 ========= >>>>>>>>>>>>>>           \nEpoch 3/600\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Attention Dense U-Net with Deep Supervision","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom monai.networks.blocks import  UnetResBlock\nfrom monai.networks.layers import Norm, Act\nfrom monai.networks.nets import UNet\nfrom monai.losses import DiceLoss\nfrom monai.metrics import DiceMetric\nfrom monai.transforms import AsDiscrete\nfrom monai.inferers import sliding_window_inference","metadata":{"execution":{"iopub.status.busy":"2024-09-26T07:58:05.651998Z","iopub.execute_input":"2024-09-26T07:58:05.652377Z","iopub.status.idle":"2024-09-26T07:58:05.686767Z","shell.execute_reply.started":"2024-09-26T07:58:05.652334Z","shell.execute_reply":"2024-09-26T07:58:05.685939Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nfrom monai.networks.blocks import Convolution, ResidualUnit, DenseBlock\nfrom monai.networks.layers import Conv, Norm, Act\n\nclass AttentionBlock(nn.Module):\n    def __init__(self, F_g, F_l, F_int):\n        super(AttentionBlock, self).__init__()\n        self.W_g = nn.Sequential(\n            nn.Conv3d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True),\n            nn.BatchNorm3d(F_int)\n        )\n\n        self.W_x = nn.Sequential(\n            nn.Conv3d(F_l, F_int, kernel_size=1, stride=1, padding=0, bias=True),\n            nn.BatchNorm3d(F_int)\n        )\n\n        self.psi = nn.Sequential(\n            nn.Conv3d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True),\n            nn.BatchNorm3d(1),\n            nn.Sigmoid()\n        )\n\n        self.relu = nn.ReLU(inplace=True)\n\n    def forward(self, g, x):\n        g1 = self.W_g(g)\n        x1 = self.W_x(x)\n        psi = self.relu(g1 + x1)\n        psi = self.psi(psi)\n        return x * psi\n\n\nclass CustomDenseBlock(nn.Module):\n    def __init__(self, in_channels, growth_rate, layers):\n        super(CustomDenseBlock, self).__init__()\n        self.layers = nn.ModuleList()\n        for i in range(layers):\n            self.layers.append(\n                nn.Sequential(\n                    nn.Conv3d(in_channels + i * growth_rate, growth_rate, kernel_size=3, padding=1),\n                    nn.BatchNorm3d(growth_rate),\n                    nn.ReLU(inplace=True)\n                )\n            )\n\n    def forward(self, x):\n        features = [x]\n        for layer in self.layers:\n            new_feature = layer(torch.cat(features, dim=1))\n            features.append(new_feature)\n        return torch.cat(features, dim=1)\n\nclass AttentionDenseUNet(nn.Module):\n    def __init__(self, in_channels, out_channels, filters, growth_rate):\n        super(AttentionDenseUNet, self).__init__()\n\n        # Encoding Path\n        self.encoder1 = CustomDenseBlock(in_channels, growth_rate, layers=4)\n        self.bottleneck1 = nn.Conv3d(in_channels + growth_rate * 4, filters[0], kernel_size=1)\n\n        self.encoder2 = CustomDenseBlock(filters[0], growth_rate, layers=4)\n        self.bottleneck2 = nn.Conv3d(filters[0] + growth_rate * 4, filters[1], kernel_size=1)\n\n        self.encoder3 = CustomDenseBlock(filters[1], growth_rate, layers=4)\n        self.bottleneck3 = nn.Conv3d(filters[1] + growth_rate * 4, filters[2], kernel_size=1)\n\n        # Attention Mechanism\n        self.attention1 = AttentionBlock(F_g=filters[2], F_l=filters[1], F_int=filters[1] // 2)\n        self.attention2 = AttentionBlock(F_g=filters[1], F_l=filters[0], F_int=filters[0] // 2)\n\n        # Decoding Path\n        self.decoder1 = nn.ConvTranspose3d(filters[1] * 2, filters[0], kernel_size=2, stride=2)\n        self.decoder2 = nn.ConvTranspose3d(filters[0] * 2, filters[0], kernel_size=2, stride=2)\n\n        # Deep Supervision Outputs\n        self.deep_supervision1 = nn.Conv3d(filters[1], out_channels, kernel_size=1)\n        self.deep_supervision2 = nn.Conv3d(filters[0], out_channels, kernel_size=1)\n\n        self.final = nn.Conv3d(filters[0], out_channels, kernel_size=1)\n\n    def forward(self, x):\n        # Encoding\n        enc1 = self.encoder1(x)\n        enc1 = self.bottleneck1(enc1)\n\n        enc2 = self.encoder2(enc1)\n        enc2 = self.bottleneck2(enc2)\n\n        enc3 = self.encoder3(enc2)\n        enc3 = self.bottleneck3(enc3)\n\n        # Attention\n        dec2_att = self.attention1(enc3, enc2)\n        dec2 = self.decoder1(torch.cat([enc3, dec2_att], dim=1))\n\n        dec1_att = self.attention2(dec2, enc1)\n        dec1 = self.decoder2(torch.cat([dec2, dec1_att], dim=1))\n\n        # Deep Supervision\n        deep1 = self.deep_supervision1(enc2)\n        deep2 = self.deep_supervision2(enc1)\n\n        return self.final(dec1), deep1, deep2\n    \nclass DeepSupervisionLoss(nn.Module):\n    def __init__(self, base_loss):\n        super(DeepSupervisionLoss, self).__init__()\n        self.base_loss = base_loss\n\n    def forward(self, outputs, labels):\n        final_output, deep1, deep2 = outputs\n\n        loss1 = self.base_loss(final_output, labels)\n        loss2 = self.base_loss(deep1, labels)\n        loss3 = self.base_loss(deep2, labels)\n\n        return (loss1 + loss2 * 0.5 + loss3 * 0.5) / 2\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T07:58:05.688814Z","iopub.execute_input":"2024-09-26T07:58:05.689132Z","iopub.status.idle":"2024-09-26T07:58:05.713955Z","shell.execute_reply.started":"2024-09-26T07:58:05.689087Z","shell.execute_reply":"2024-09-26T07:58:05.713044Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"train_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),  EnsureChannelFirstD(keys=[\"image\", \"mask\"]),\n                             EnsureTyped(keys=[\"image\", \"mask\"])])\nvalid_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"), EnsureChannelFirstD(keys=[\"image\", \"mask\"]), \n                            EnsureTyped(keys=[\"image\", \"mask\"])])\n\ntrain_files, valid_files = split_data(60)\n\ntrain_ds = CacheDataset(data=train_files, transform=train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4, pin_memory=True)\n\nvalid_ds = CacheDataset(data=valid_files, transform=train_transforms)\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T07:58:05.714944Z","iopub.execute_input":"2024-09-26T07:58:05.715253Z","iopub.status.idle":"2024-09-26T07:58:55.779136Z","shell.execute_reply.started":"2024-09-26T07:58:05.715223Z","shell.execute_reply":"2024-09-26T07:58:55.778207Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stderr","text":"Loading dataset: 100%|██████████| 60/60 [00:42<00:00,  1.40it/s]\nLoading dataset: 100%|██████████| 10/10 [00:07<00:00,  1.40it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"def save_checkpoint(path, model, optimizer, scheduler, epoch, best_metric):\n    torch.save({\n        'epoch': epoch,\n        'model_state_dict': model.state_dict(),\n        'optimizer_state_dict': optimizer.state_dict(),\n        'scheduler_state_dict': scheduler.state_dict(),\n        'best_metric': best_metric,  # Save the best metric so far\n    }, path)\n    print(f\"Checkpoint saved...\")\n    \n\n\ndef load_checkpoint(path, model, optimizer, scheduler):\n    global best_metric, best_metric_epoch\n    if os.path.exists(path):\n        checkpoint = torch.load(path)\n        model.load_state_dict(checkpoint['model_state_dict'])\n        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n\n        # Handle cases where 'best_metric' might not be present in the checkpoint\n        best_metric = checkpoint.get('best_metric', best_metric)  # Load best_metric if it exists, else use current value\n\n        # Safely print best_metric whether it's available or not\n        if isinstance(best_metric, (int, float)):\n            print(f\"Resumed from checkpoint '{path}' with best Dice: {best_metric:.5f}\")\n        else:\n            print(f\"Resumed from checkpoint '{path}' but best Dice is not available\")\n\n        # Adjust the learning rate to the correct value after resuming from the checkpoint\n        for param_group in optimizer.param_groups:\n            param_group['lr'] = scheduler.optimizer.param_groups[0]['lr']\n        print(f\"Learning rate manually adjusted to: {optimizer.param_groups[0]['lr']} after checkpoint reload\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T07:58:55.781235Z","iopub.execute_input":"2024-09-26T07:58:55.781925Z","iopub.status.idle":"2024-09-26T07:58:55.790846Z","shell.execute_reply.started":"2024-09-26T07:58:55.781876Z","shell.execute_reply":"2024-09-26T07:58:55.789515Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm\nfrom monai.inferers import SlidingWindowInferer\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch\nimport os\nfrom torch.cuda.amp import GradScaler, autocast\n\nscaler = GradScaler()\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 5\nmodel = AttentionDenseUNet(in_channels=1, out_channels=num_classes, filters=[64, 128, 256],\n                           growth_rate=16).to(device)\n\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\nloss_function = DeepSupervisionLoss(DiceLoss(sigmoid=True, to_onehot_y=True, softmax=False))\n\noptimizer = torch.optim.Adam(model.parameters(), lr=0.05)\nscheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n\n#inferer = SlidingWindowInferer(roi_size=(64, 64, 64), sw_batch_size=1, overlap=0.04)\npost_pred = Compose([Activations(sigmoid=True), AsDiscrete(threshold=0.5)])\npost_label = Compose([AsDiscrete()])\n\nmax_epochs = 600\nval_interval = 1\nbest_metric = -1\nbest_metric_epoch = -1\nbest_checkpoint_path = \"v0.pth\"\nprevious_lr = optimizer.param_groups[0]['lr']\n\nif os.path.exists(best_checkpoint_path):\n    load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n\nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"\\nEpoch {epoch + 1}/{max_epochs}\")\n    print(f\"Current Learning Rate = {optimizer.param_groups[0]['lr']}\")\n\n    model.train()\n    epoch_loss = 0\n    step = 0\n    dice = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n        \n        with autocast():\n            outputs = inferer(inputs, model)\n            loss = loss_function(outputs, labels)\n\n        scaler.scale(loss).backward()\n        scaler.step(optimizer)\n        scaler.update()\n\n        epoch_loss += loss.item()\n\n        outputs = post_pred(outputs)\n        labels = post_label(labels)\n\n        dice_metric(y_pred=outputs, y=labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n\n    epoch_loss /= step\n    dice /= step\n    \n    print(f\"Average Train Loss: {epoch_loss:.4f} <-----> Average Dice score: {dice:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            val_steps = 0\n            dice = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n                val_outputs = inferer(val_inputs, model)\n\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                val_outputs = post_pred(val_outputs)\n                val_labels = post_label(val_labels)\n\n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                dice_metric.reset()\n\n            val_loss /= val_steps\n            dice /= val_steps\n            scheduler.step(val_loss)\n            \n            print(f\"Validation loss: {val_loss:.5f} <-----> Validation Dice: {dice:.5f}\")\n            print('==============================================================================================')\n\n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                save_checkpoint(best_checkpoint_path, model, optimizer, scheduler, epoch + 1, best_metric)\n                print(f\"          <<<<<<<<< ====== Saved best model at epoch {best_metric_epoch}, best dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>           \")\n\n    current_lr = optimizer.param_groups[0]['lr']\n    if current_lr < previous_lr:\n        print(f\"Learning rate reduced from {previous_lr} to {current_lr}. Reloading the best model checkpoint.\")\n        load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n        \n    previous_lr = current_lr\n\nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:04:39.520608Z","iopub.execute_input":"2024-09-26T08:04:39.520998Z","iopub.status.idle":"2024-09-26T08:04:40.389834Z","shell.execute_reply.started":"2024-09-26T08:04:39.520963Z","shell.execute_reply":"2024-09-26T08:04:40.388191Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1/600\nCurrent Learning Rate = 0.05\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[11], line 51\u001b[0m\n\u001b[1;32m     48\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m autocast():\n\u001b[0;32m---> 51\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m \u001b[43minferer\u001b[49m\u001b[43m(\u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     52\u001b[0m     loss \u001b[38;5;241m=\u001b[39m loss_function(outputs, labels)\n\u001b[1;32m     54\u001b[0m scaler\u001b[38;5;241m.\u001b[39mscale(loss)\u001b[38;5;241m.\u001b[39mbackward()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/inferers/inferer.py:515\u001b[0m, in \u001b[0;36mSlidingWindowInferer.__call__\u001b[0;34m(self, inputs, network, *args, **kwargs)\u001b[0m\n\u001b[1;32m    512\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m device \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcpu_thresh \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m inputs\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m2\u001b[39m:]\u001b[38;5;241m.\u001b[39mnumel() \u001b[38;5;241m>\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcpu_thresh:\n\u001b[1;32m    513\u001b[0m     device \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m\"\u001b[39m  \u001b[38;5;66;03m# stitch in cpu memory if image is too large\u001b[39;00m\n\u001b[0;32m--> 515\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msliding_window_inference\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    516\u001b[0m \u001b[43m    \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    517\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mroi_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    518\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msw_batch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    519\u001b[0m \u001b[43m    \u001b[49m\u001b[43mnetwork\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    520\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moverlap\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    521\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    522\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msigma_scale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpadding_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    524\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcval\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    525\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msw_device\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    526\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    527\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprogress\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    528\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mroi_weight_map\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    529\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    530\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbuffer_steps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    531\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbuffer_dim\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    532\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwith_coord\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    533\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    534\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    535\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/inferers/utils.py:229\u001b[0m, in \u001b[0;36msliding_window_inference\u001b[0;34m(inputs, roi_size, sw_batch_size, predictor, overlap, mode, sigma_scale, padding_mode, cval, sw_device, device, progress, roi_weight_map, process_fn, buffer_steps, buffer_dim, with_coord, *args, **kwargs)\u001b[0m\n\u001b[1;32m    227\u001b[0m     seg_prob_out \u001b[38;5;241m=\u001b[39m predictor(win_data, unravel_slice, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# batched patch\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 229\u001b[0m     seg_prob_out \u001b[38;5;241m=\u001b[39m \u001b[43mpredictor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwin_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# batched patch\u001b[39;00m\n\u001b[1;32m    231\u001b[0m \u001b[38;5;66;03m# convert seg_prob_out to tuple seg_tuple, this does not allocate new memory.\u001b[39;00m\n\u001b[1;32m    232\u001b[0m dict_keys, seg_tuple \u001b[38;5;241m=\u001b[39m _flatten_struct(seg_prob_out)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","Cell \u001b[0;32mIn[6], line 96\u001b[0m, in \u001b[0;36mAttentionDenseUNet.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[38;5;66;03m# Attention\u001b[39;00m\n\u001b[1;32m     95\u001b[0m dec2_att \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mattention1(enc3, enc2)\n\u001b[0;32m---> 96\u001b[0m dec2 \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdecoder1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcat\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43menc3\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdec2_att\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     98\u001b[0m dec1_att \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mattention2(dec2, enc1)\n\u001b[1;32m     99\u001b[0m dec1 \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdecoder2(torch\u001b[38;5;241m.\u001b[39mcat([dec2, dec1_att], dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m))\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/conv.py:1100\u001b[0m, in \u001b[0;36mConvTranspose3d.forward\u001b[0;34m(self, input, output_size)\u001b[0m\n\u001b[1;32m   1095\u001b[0m num_spatial_dims \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m3\u001b[39m\n\u001b[1;32m   1096\u001b[0m output_padding \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_output_padding(\n\u001b[1;32m   1097\u001b[0m     \u001b[38;5;28minput\u001b[39m, output_size, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstride, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mkernel_size,  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[1;32m   1098\u001b[0m     num_spatial_dims, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdilation)  \u001b[38;5;66;03m# type: ignore[arg-type]\u001b[39;00m\n\u001b[0;32m-> 1100\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mF\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv_transpose3d\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1101\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbias\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstride\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpadding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1102\u001b[0m \u001b[43m    \u001b[49m\u001b[43moutput_padding\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgroups\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdilation\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mRuntimeError\u001b[0m: Given transposed=1, weight of size [256, 64, 2, 2, 2], expected input[1, 384, 64, 64, 64] to have 256 channels, but got 384 channels instead"],"ename":"RuntimeError","evalue":"Given transposed=1, weight of size [256, 64, 2, 2, 2], expected input[1, 384, 64, 64, 64] to have 256 channels, but got 384 channels instead","output_type":"error"}]},{"cell_type":"markdown","source":"# SegResNet","metadata":{}},{"cell_type":"code","source":"train_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),  EnsureChannelFirstD(keys=[\"image\", \"mask\"]),\n                             EnsureTyped(keys=[\"image\", \"mask\"])])\nvalid_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"), EnsureChannelFirstD(keys=[\"image\", \"mask\"]), \n                            EnsureTyped(keys=[\"image\", \"mask\"])])\n\ntrain_files, valid_files = split_data(60)\n\ntrain_ds = CacheDataset(data=train_files, transform=train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4, pin_memory=True)\n\nvalid_ds = CacheDataset(data=valid_files, transform=train_transforms)\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:10:53.828410Z","iopub.execute_input":"2024-09-26T08:10:53.828833Z","iopub.status.idle":"2024-09-26T08:11:49.155511Z","shell.execute_reply.started":"2024-09-26T08:10:53.828790Z","shell.execute_reply":"2024-09-26T08:11:49.154646Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"Loading dataset: 100%|██████████| 60/60 [00:48<00:00,  1.25it/s]\nLoading dataset: 100%|██████████| 10/10 [00:07<00:00,  1.39it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"def save_checkpoint(path, model, optimizer, scheduler, epoch, best_metric):\n    torch.save({\n        'epoch': epoch,\n        'model_state_dict': model.state_dict(),\n        'optimizer_state_dict': optimizer.state_dict(),\n        'scheduler_state_dict': scheduler.state_dict(),\n        'best_metric': best_metric,  # Save the best metric so far\n    }, path)\n    print(f\"Checkpoint saved...\")\n    \n\n\ndef load_checkpoint(path, model, optimizer, scheduler):\n    global best_metric, best_metric_epoch\n    if os.path.exists(path):\n        checkpoint = torch.load(path)\n        model.load_state_dict(checkpoint['model_state_dict'])\n        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n\n        # Handle cases where 'best_metric' might not be present in the checkpoint\n        best_metric = checkpoint.get('best_metric', best_metric)  # Load best_metric if it exists, else use current value\n\n        # Safely print best_metric whether it's available or not\n        if isinstance(best_metric, (int, float)):\n            print(f\"Resumed from checkpoint '{path}' with best Dice: {best_metric:.5f}\")\n        else:\n            print(f\"Resumed from checkpoint '{path}' but best Dice is not available\")\n\n        # Adjust the learning rate to the correct value after resuming from the checkpoint\n        for param_group in optimizer.param_groups:\n            param_group['lr'] = scheduler.optimizer.param_groups[0]['lr']\n        print(f\"Learning rate manually adjusted to: {optimizer.param_groups[0]['lr']} after checkpoint reload\")","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:13:36.032483Z","iopub.execute_input":"2024-09-26T08:13:36.032894Z","iopub.status.idle":"2024-09-26T08:13:36.041939Z","shell.execute_reply.started":"2024-09-26T08:13:36.032854Z","shell.execute_reply":"2024-09-26T08:13:36.040996Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm\nfrom monai.inferers import SlidingWindowInferer\nfrom monai.networks.nets import SegResNet\nfrom monai.optimizers import Novograd\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch\nimport os\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 5\nmodel = SegResNet(spatial_dims=3, in_channels=1, out_channels=num_classes, init_filters=16,  \n    blocks_down=(1, 2, 2, 4),  blocks_up=(1, 1, 1), dropout_prob=0.2 ).to(device)\n\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\nloss_function = DiceLoss(include_background=True, to_onehot_y=True, softmax=True)\n\noptimizer = torch.optim.Adam(model.parameters(), lr=0.05)\nscheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n\ninferer = SlidingWindowInferer(roi_size=(64, 64, 64), sw_batch_size=16, overlap=0.04)\npost_pred = Compose([Activations(sigmoid=True), AsDiscrete(threshold=0.5)])\npost_label = Compose([AsDiscrete()])\n\nmax_epochs = 600\nval_interval = 1\nbest_metric = -1\nbest_metric_epoch = -1\nbest_checkpoint_path = \"v0.pth\"\nprevious_lr = optimizer.param_groups[0]['lr']\n\nif os.path.exists(best_checkpoint_path):\n    load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n\nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"\\nEpoch {epoch + 1}/{max_epochs}\")\n    print(f\"Current Learning Rate = {optimizer.param_groups[0]['lr']}\")\n\n    model.train()\n    epoch_loss = 0\n    step = 0\n    dice = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n        outputs = inferer(inputs, model)\n\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        epoch_loss += loss.item()\n\n        outputs = post_pred(outputs)\n        labels = post_label(labels)\n\n        dice_metric(y_pred=outputs, y=labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n\n    epoch_loss /= step\n    dice /= step\n    \n    print(f\"Average Train Loss: {epoch_loss:.4f} <-----> Average Dice score: {dice:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            val_steps = 0\n            dice = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n                val_outputs = inferer(val_inputs, model)\n\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                val_outputs = post_pred(val_outputs)\n                val_labels = post_label(val_labels)\n\n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                dice_metric.reset()\n\n            val_loss /= val_steps\n            dice /= val_steps\n            scheduler.step(val_loss)\n            \n            print(f\"Validation loss: {val_loss:.5f} <-----> Validation Dice: {dice:.5f}\")\n            print('==============================================================================================')\n\n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                save_checkpoint(best_checkpoint_path, model, optimizer, scheduler, epoch + 1, best_metric)\n                print(f\"          <<<<<<<<< ====== Saved best model at epoch {best_metric_epoch}, best dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>           \")\n\n    current_lr = optimizer.param_groups[0]['lr']\n    if current_lr < previous_lr:\n        print(f\"Learning rate reduced from {previous_lr} to {current_lr}. Reloading the best model checkpoint.\")\n        load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n        \n    previous_lr = current_lr\n\nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:16:02.413794Z","iopub.execute_input":"2024-09-26T08:16:02.414791Z","iopub.status.idle":"2024-09-26T08:16:04.272066Z","shell.execute_reply.started":"2024-09-26T08:16:02.414748Z","shell.execute_reply":"2024-09-26T08:16:04.270373Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1/600\nCurrent Learning Rate = 0.05\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOutOfMemoryError\u001b[0m                          Traceback (most recent call last)","Cell \u001b[0;32mIn[8], line 48\u001b[0m\n\u001b[1;32m     46\u001b[0m inputs, labels \u001b[38;5;241m=\u001b[39m batch_data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mimage\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mto(device), batch_data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmask\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     47\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m---> 48\u001b[0m outputs \u001b[38;5;241m=\u001b[39m \u001b[43minferer\u001b[49m\u001b[43m(\u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     50\u001b[0m loss \u001b[38;5;241m=\u001b[39m loss_function(outputs, labels)\n\u001b[1;32m     51\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/inferers/inferer.py:515\u001b[0m, in \u001b[0;36mSlidingWindowInferer.__call__\u001b[0;34m(self, inputs, network, *args, **kwargs)\u001b[0m\n\u001b[1;32m    512\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m device \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcpu_thresh \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mand\u001b[39;00m inputs\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m2\u001b[39m:]\u001b[38;5;241m.\u001b[39mnumel() \u001b[38;5;241m>\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcpu_thresh:\n\u001b[1;32m    513\u001b[0m     device \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m\"\u001b[39m  \u001b[38;5;66;03m# stitch in cpu memory if image is too large\u001b[39;00m\n\u001b[0;32m--> 515\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msliding_window_inference\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    516\u001b[0m \u001b[43m    \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    517\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mroi_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    518\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msw_batch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    519\u001b[0m \u001b[43m    \u001b[49m\u001b[43mnetwork\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    520\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moverlap\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    521\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    522\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msigma_scale\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpadding_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    524\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcval\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    525\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msw_device\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    526\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdevice\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    527\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mprogress\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    528\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mroi_weight_map\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    529\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    530\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbuffer_steps\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    531\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbuffer_dim\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    532\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwith_coord\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    533\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    534\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    535\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/inferers/utils.py:229\u001b[0m, in \u001b[0;36msliding_window_inference\u001b[0;34m(inputs, roi_size, sw_batch_size, predictor, overlap, mode, sigma_scale, padding_mode, cval, sw_device, device, progress, roi_weight_map, process_fn, buffer_steps, buffer_dim, with_coord, *args, **kwargs)\u001b[0m\n\u001b[1;32m    227\u001b[0m     seg_prob_out \u001b[38;5;241m=\u001b[39m predictor(win_data, unravel_slice, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# batched patch\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 229\u001b[0m     seg_prob_out \u001b[38;5;241m=\u001b[39m \u001b[43mpredictor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mwin_data\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# batched patch\u001b[39;00m\n\u001b[1;32m    231\u001b[0m \u001b[38;5;66;03m# convert seg_prob_out to tuple seg_tuple, this does not allocate new memory.\u001b[39;00m\n\u001b[1;32m    232\u001b[0m dict_keys, seg_tuple \u001b[38;5;241m=\u001b[39m _flatten_struct(seg_prob_out)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/networks/nets/segresnet.py:180\u001b[0m, in \u001b[0;36mSegResNet.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    179\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x: torch\u001b[38;5;241m.\u001b[39mTensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m torch\u001b[38;5;241m.\u001b[39mTensor:\n\u001b[0;32m--> 180\u001b[0m     x, down_x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mencode\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    181\u001b[0m     down_x\u001b[38;5;241m.\u001b[39mreverse()\n\u001b[1;32m    183\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdecode(x, down_x)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/networks/nets/segresnet.py:164\u001b[0m, in \u001b[0;36mSegResNet.encode\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    161\u001b[0m down_x \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    163\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m down \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdown_layers:\n\u001b[0;32m--> 164\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[43mdown\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    165\u001b[0m     down_x\u001b[38;5;241m.\u001b[39mappend(x)\n\u001b[1;32m    167\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m x, down_x\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/container.py:219\u001b[0m, in \u001b[0;36mSequential.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    217\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m):\n\u001b[1;32m    218\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m module \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m:\n\u001b[0;32m--> 219\u001b[0m         \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[43mmodule\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    220\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28minput\u001b[39m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/monai/networks/blocks/segresnet_block.py:92\u001b[0m, in \u001b[0;36mResBlock.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     90\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnorm2(x)\n\u001b[1;32m     91\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mact(x)\n\u001b[0;32m---> 92\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv2\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     94\u001b[0m x \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m identity\n\u001b[1;32m     96\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m x\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/container.py:219\u001b[0m, in \u001b[0;36mSequential.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    217\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m):\n\u001b[1;32m    218\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m module \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m:\n\u001b[0;32m--> 219\u001b[0m         \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[43mmodule\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    220\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28minput\u001b[39m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/conv.py:608\u001b[0m, in \u001b[0;36mConv3d.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    607\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m: Tensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[0;32m--> 608\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_conv_forward\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbias\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/conv.py:603\u001b[0m, in \u001b[0;36mConv3d._conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    591\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mzeros\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    592\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mconv3d(\n\u001b[1;32m    593\u001b[0m         F\u001b[38;5;241m.\u001b[39mpad(\n\u001b[1;32m    594\u001b[0m             \u001b[38;5;28minput\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    601\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgroups,\n\u001b[1;32m    602\u001b[0m     )\n\u001b[0;32m--> 603\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mF\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv3d\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    604\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbias\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstride\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpadding\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdilation\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgroups\u001b[49m\n\u001b[1;32m    605\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mOutOfMemoryError\u001b[0m: CUDA out of memory. Tried to allocate 256.00 MiB. GPU 0 has a total capacity of 14.74 GiB of which 186.12 MiB is free. Process 2719 has 14.56 GiB memory in use. Of the allocated memory 14.42 GiB is allocated by PyTorch, and 16.21 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)"],"ename":"OutOfMemoryError","evalue":"CUDA out of memory. Tried to allocate 256.00 MiB. GPU 0 has a total capacity of 14.74 GiB of which 186.12 MiB is free. Process 2719 has 14.56 GiB memory in use. Of the allocated memory 14.42 GiB is allocated by PyTorch, and 16.21 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)","output_type":"error"}]},{"cell_type":"markdown","source":"# binary mask transform","metadata":{}},{"cell_type":"markdown","source":"## for class 1","metadata":{}},{"cell_type":"code","source":"class BinaryMaskTransform(MapTransform):\n    def __init__(self, keys, class_value):\n        super().__init__(keys)\n        self.class_value = class_value\n\n    def __call__(self, data):\n        d = dict(data)\n        for key in self.keys:\n            d[key] = (d[key] == self.class_value).float()\n        return d","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:38:43.367326Z","iopub.execute_input":"2024-09-26T08:38:43.367740Z","iopub.status.idle":"2024-09-26T08:38:43.401046Z","shell.execute_reply.started":"2024-09-26T08:38:43.367669Z","shell.execute_reply":"2024-09-26T08:38:43.400088Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),  EnsureChannelFirstD(keys=[\"image\", \"mask\"])\n                ,RandFlipD(keys=[\"image\", \"mask\"], prob=0.7, spatial_axis=0),RandRotate90D(keys=[\"image\", \"mask\"], prob=0.7, max_k=3),\n                ScaleIntensityD(keys=\"image\"), EnsureTyped(keys=[\"image\", \"mask\"]), ResizeD(keys=[\"image\", \"mask\"], spatial_size=(256, 256, 256)),\n                          BinaryMaskTransform(keys=[\"mask\"], class_value=1), EnsureTyped(keys=[\"image\", \"mask\"]), ToTensord(keys=[\"image\", \"mask\"])  ])\n\nvalid_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"), EnsureChannelFirstD(keys=[\"image\", \"mask\"]),\n               ScaleIntensityD(keys=\"image\"), EnsureTyped(keys=[\"image\", \"mask\"]), ResizeD(keys=[\"image\", \"mask\"], spatial_size=(256, 256, 256)),\n                          BinaryMaskTransform(keys=[\"mask\"], class_value=1), EnsureTyped(keys=[\"image\", \"mask\"]), ToTensord(keys=[\"image\", \"mask\"])  ])\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:28:39.166372Z","iopub.execute_input":"2024-09-13T15:28:39.167330Z","iopub.status.idle":"2024-09-13T15:28:39.183482Z","shell.execute_reply.started":"2024-09-13T15:28:39.167277Z","shell.execute_reply":"2024-09-13T15:28:39.182516Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"train_files, valid_files = split_data(50)\n\ntrain_ds = CacheDataset(data=train_files, transform=train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4)\n\nvalid_ds = CacheDataset(data=valid_files, transform=train_transforms)\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4)","metadata":{"execution":{"iopub.status.busy":"2024-09-13T15:28:45.599447Z","iopub.execute_input":"2024-09-13T15:28:45.600187Z","iopub.status.idle":"2024-09-13T15:29:51.703242Z","shell.execute_reply.started":"2024-09-13T15:28:45.600142Z","shell.execute_reply":"2024-09-13T15:29:51.702198Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"Loading dataset: 100%|██████████| 50/50 [00:47<00:00,  1.06it/s]\nLoading dataset: 100%|██████████| 20/20 [00:18<00:00,  1.07it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"from tqdm import tqdm\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 1\nmodel = UNet(spatial_dims=3, in_channels=1, out_channels=num_classes, channels=(16, 32, 64, 128, 256),\n             strides=(2, 2, 2, 2), num_res_units=4, dropout=0.1).to(device)\n\nloss_function = DiceLoss(include_background=True, to_onehot_y=False, sigmoid=True)\noptimizer = torch.optim.Adam(model.parameters())\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\n\npost_pred = Compose([Activations(sigmoid=True), AsDiscrete(threshold=0.5)])\npost_label = Compose([AsDiscrete()])\n\nmax_epochs = 600\nval_interval = 2\nbest_metric = -1\nbest_metric_epoch = -1\n\nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"Epoch {epoch + 1}/{max_epochs}\")\n    model.train()\n    epoch_loss = 0\n    step = 0\n    dice = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n        outputs = model(inputs)\n\n        # Compute the loss without applying post-processing\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        epoch_loss += loss.item()\n\n        # Now apply post-processing for metrics\n        outputs = post_pred(outputs)\n        labels = post_label(labels)\n\n        dice_metric(y_pred=outputs, y=labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n\n    # Calculate the average loss and Dice score after the loop\n    epoch_loss /= step\n    dice /= step\n\n    print(f\"Average Train Loss: {epoch_loss:.4f} <-----> Average Dice score: {dice:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            val_steps = 0\n            dice = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n                val_outputs = model(val_inputs)\n\n                # Compute validation loss without post-processing\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                # Apply post-processing for metrics\n                val_outputs = post_pred(val_outputs)\n                val_labels = post_label(val_labels)\n\n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                dice_metric.reset()\n\n            # Calculate the average validation loss and Dice score after the loop\n            val_loss /= val_steps\n            dice /= val_steps\n\n            print(f\"Validation loss: {val_loss:.5f} <-----> Validation Dice: {dice:.5f}\")\n            print('==============================================================================================')\n\n            # Save the best model based on Dice score\n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                torch.save(model.state_dict(), \"v0.pth\")\n                print(f\"          <<<<<<<<< ====== Saved best model at epoch {best_metric_epoch}, best dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>           \")\n\nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-13T16:25:08.524241Z","iopub.execute_input":"2024-09-13T16:25:08.524651Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch 1/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 1/600 [02:27<24:36:47, 147.93s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9983 <-----> Average Dice score: 0.0034\nEpoch 2/600\nAverage Train Loss: 0.9980 <-----> Average Dice score: 0.0065\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 2/600 [05:14<26:22:28, 158.78s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99763 <-----> Validation Dice: 0.00939\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 2, best dice: 0.00939 ========= >>>>>>>>>>>>>>           \nEpoch 3/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 3/600 [07:42<25:31:32, 153.92s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9979 <-----> Average Dice score: 0.0072\nEpoch 4/600\nAverage Train Loss: 0.9978 <-----> Average Dice score: 0.0070\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 4/600 [10:29<26:19:24, 159.00s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99735 <-----> Validation Dice: 0.00759\n==============================================================================================\nEpoch 5/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 5/600 [12:57<25:36:57, 154.99s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9976 <-----> Average Dice score: 0.0070\nEpoch 6/600\nAverage Train Loss: 0.9973 <-----> Average Dice score: 0.0070\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 6/600 [15:42<26:10:05, 158.60s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99659 <-----> Validation Dice: 0.00775\n==============================================================================================\nEpoch 7/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 7/600 [18:10<25:33:59, 155.21s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9969 <-----> Average Dice score: 0.0068\nEpoch 8/600\nAverage Train Loss: 0.9964 <-----> Average Dice score: 0.0069\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|▏         | 8/600 [20:56<26:02:43, 158.38s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99518 <-----> Validation Dice: 0.00908\n==============================================================================================\nEpoch 9/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 9/600 [23:23<25:27:21, 155.06s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9956 <-----> Average Dice score: 0.0075\nEpoch 10/600\nAverage Train Loss: 0.9947 <-----> Average Dice score: 0.0084\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 10/600 [26:09<25:56:25, 158.28s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99320 <-----> Validation Dice: 0.00966\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 10, best dice: 0.00966 ========= >>>>>>>>>>>>>>           \nEpoch 11/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 11/600 [28:37<25:22:30, 155.09s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9942 <-----> Average Dice score: 0.0081\nEpoch 12/600\nAverage Train Loss: 0.9933 <-----> Average Dice score: 0.0093\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 12/600 [31:22<25:51:01, 158.27s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99171 <-----> Validation Dice: 0.01404\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 12, best dice: 0.01404 ========= >>>>>>>>>>>>>>           \nEpoch 13/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 13/600 [33:50<25:16:52, 155.05s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9924 <-----> Average Dice score: 0.0106\nEpoch 14/600\nAverage Train Loss: 0.9917 <-----> Average Dice score: 0.0115\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 14/600 [36:36<25:46:03, 158.30s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.98973 <-----> Validation Dice: 0.01175\n==============================================================================================\nEpoch 15/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▎         | 15/600 [39:03<25:11:18, 155.01s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9904 <-----> Average Dice score: 0.0125\nEpoch 16/600\nAverage Train Loss: 0.9893 <-----> Average Dice score: 0.0148\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 16/600 [41:48<25:38:53, 158.11s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.98764 <-----> Validation Dice: 0.01406\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 16, best dice: 0.01406 ========= >>>>>>>>>>>>>>           \nEpoch 17/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 17/600 [44:16<25:05:38, 154.95s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9898 <-----> Average Dice score: 0.0127\nEpoch 18/600\nAverage Train Loss: 0.9883 <-----> Average Dice score: 0.0145\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 18/600 [47:01<25:32:23, 157.98s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.98430 <-----> Validation Dice: 0.01832\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 18, best dice: 0.01832 ========= >>>>>>>>>>>>>>           \nEpoch 19/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 19/600 [49:29<24:59:36, 154.87s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9864 <-----> Average Dice score: 0.0172\nEpoch 20/600\nAverage Train Loss: 0.9856 <-----> Average Dice score: 0.0188\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 20/600 [52:14<25:27:13, 157.99s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.97996 <-----> Validation Dice: 0.02841\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 20, best dice: 0.02841 ========= >>>>>>>>>>>>>>           \nEpoch 21/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▎         | 21/600 [54:42<24:54:49, 154.90s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9845 <-----> Average Dice score: 0.0194\nEpoch 22/600\nAverage Train Loss: 0.9848 <-----> Average Dice score: 0.0180\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▎         | 22/600 [57:27<25:23:27, 158.14s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.97877 <-----> Validation Dice: 0.02887\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 22, best dice: 0.02887 ========= >>>>>>>>>>>>>>           \nEpoch 23/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 23/600 [59:55<24:50:04, 154.95s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9805 <-----> Average Dice score: 0.0248\nEpoch 24/600\nAverage Train Loss: 0.9789 <-----> Average Dice score: 0.0262\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 24/600 [1:02:40<25:18:12, 158.15s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.97233 <-----> Validation Dice: 0.03340\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 24, best dice: 0.03340 ========= >>>>>>>>>>>>>>           \nEpoch 25/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 25/600 [1:05:08<24:44:32, 154.91s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9760 <-----> Average Dice score: 0.0301\nEpoch 26/600\nAverage Train Loss: 0.9732 <-----> Average Dice score: 0.0340\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 26/600 [1:07:54<25:14:35, 158.32s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.96674 <-----> Validation Dice: 0.04399\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 26, best dice: 0.04399 ========= >>>>>>>>>>>>>>           \nEpoch 27/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 27/600 [1:10:22<24:41:48, 155.16s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9751 <-----> Average Dice score: 0.0320\nEpoch 28/600\nAverage Train Loss: 0.9846 <-----> Average Dice score: 0.0167\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▍         | 28/600 [1:13:07<25:08:03, 158.19s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.97374 <-----> Validation Dice: 0.02978\n==============================================================================================\nEpoch 29/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▍         | 29/600 [1:15:35<24:37:01, 155.20s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9759 <-----> Average Dice score: 0.0283\nEpoch 30/600\nAverage Train Loss: 0.9675 <-----> Average Dice score: 0.0409\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▌         | 30/600 [1:18:21<25:03:50, 158.30s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.95584 <-----> Validation Dice: 0.05424\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 30, best dice: 0.05424 ========= >>>>>>>>>>>>>>           \nEpoch 31/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▌         | 31/600 [1:20:49<24:31:35, 155.18s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9633 <-----> Average Dice score: 0.0467\nEpoch 32/600\nAverage Train Loss: 0.9430 <-----> Average Dice score: 0.0763\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▌         | 32/600 [1:23:35<24:59:55, 158.44s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.92541 <-----> Validation Dice: 0.07515\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 32, best dice: 0.07515 ========= >>>>>>>>>>>>>>           \nEpoch 33/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 33/600 [1:26:03<24:28:13, 155.37s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.9821 <-----> Average Dice score: 0.0229\nEpoch 34/600\nAverage Train Loss: 0.8721 <-----> Average Dice score: 0.1689\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 34/600 [1:28:49<24:55:52, 158.57s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.63794 <-----> Validation Dice: 0.37002\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 34, best dice: 0.37002 ========= >>>>>>>>>>>>>>           \nEpoch 35/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 35/600 [1:31:17<24:23:34, 155.42s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.7560 <-----> Average Dice score: 0.2797\nEpoch 36/600\nAverage Train Loss: 0.6575 <-----> Average Dice score: 0.3694\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 36/600 [1:34:03<24:51:44, 158.70s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.58156 <-----> Validation Dice: 0.42087\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 36, best dice: 0.42087 ========= >>>>>>>>>>>>>>           \nEpoch 37/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 37/600 [1:36:31<24:18:32, 155.44s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.6429 <-----> Average Dice score: 0.3738\nEpoch 38/600\nAverage Train Loss: 0.6229 <-----> Average Dice score: 0.3915\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▋         | 38/600 [1:39:17<24:45:46, 158.62s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.58927 <-----> Validation Dice: 0.41255\n==============================================================================================\nEpoch 39/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▋         | 39/600 [1:41:45<24:12:56, 155.40s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.6039 <-----> Average Dice score: 0.4080\nEpoch 40/600\nAverage Train Loss: 0.5903 <-----> Average Dice score: 0.4200\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 40/600 [1:44:30<24:37:23, 158.29s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.58047 <-----> Validation Dice: 0.42194\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 40, best dice: 0.42194 ========= >>>>>>>>>>>>>>           \nEpoch 41/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 41/600 [1:46:58<24:05:55, 155.20s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5987 <-----> Average Dice score: 0.4102\nEpoch 42/600\nAverage Train Loss: 0.5844 <-----> Average Dice score: 0.4232\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 42/600 [1:49:43<24:31:01, 158.17s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55247 <-----> Validation Dice: 0.44865\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 42, best dice: 0.44865 ========= >>>>>>>>>>>>>>           \nEpoch 43/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 43/600 [1:52:11<23:59:21, 155.05s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5724 <-----> Average Dice score: 0.4348\nEpoch 44/600\nAverage Train Loss: 0.5769 <-----> Average Dice score: 0.4300\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 44/600 [1:54:57<24:27:23, 158.35s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.56597 <-----> Validation Dice: 0.43542\n==============================================================================================\nEpoch 45/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 45/600 [1:57:25<23:55:55, 155.24s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5632 <-----> Average Dice score: 0.4428\nEpoch 46/600\nAverage Train Loss: 0.5694 <-----> Average Dice score: 0.4358\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 46/600 [2:00:11<24:22:47, 158.43s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55377 <-----> Validation Dice: 0.44759\n==============================================================================================\nEpoch 47/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 47/600 [2:02:39<23:51:32, 155.32s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5726 <-----> Average Dice score: 0.4319\nEpoch 48/600\nAverage Train Loss: 0.5659 <-----> Average Dice score: 0.4391\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 48/600 [2:05:25<24:18:46, 158.56s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55040 <-----> Validation Dice: 0.45078\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 48, best dice: 0.45078 ========= >>>>>>>>>>>>>>           \nEpoch 49/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 49/600 [2:07:53<23:46:46, 155.36s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5550 <-----> Average Dice score: 0.4494\nEpoch 50/600\nAverage Train Loss: 0.5622 <-----> Average Dice score: 0.4418\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 50/600 [2:10:39<24:11:46, 158.38s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.56084 <-----> Validation Dice: 0.43998\n==============================================================================================\nEpoch 51/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 51/600 [2:13:07<23:41:38, 155.37s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5486 <-----> Average Dice score: 0.4552\nEpoch 52/600\nAverage Train Loss: 0.5525 <-----> Average Dice score: 0.4516\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   9%|▊         | 52/600 [2:15:52<24:05:59, 158.32s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.54297 <-----> Validation Dice: 0.45785\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 52, best dice: 0.45785 ========= >>>>>>>>>>>>>>           \nEpoch 53/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   9%|▉         | 53/600 [2:18:20<23:34:48, 155.19s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5410 <-----> Average Dice score: 0.4629\nEpoch 54/600\nAverage Train Loss: 0.5428 <-----> Average Dice score: 0.4603\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   9%|▉         | 54/600 [2:21:05<23:59:16, 158.16s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53915 <-----> Validation Dice: 0.46133\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 54, best dice: 0.46133 ========= >>>>>>>>>>>>>>           \nEpoch 55/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   9%|▉         | 55/600 [2:23:33<23:27:51, 154.99s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5362 <-----> Average Dice score: 0.4670\nEpoch 56/600\nAverage Train Loss: 0.5381 <-----> Average Dice score: 0.4650\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   9%|▉         | 56/600 [2:26:18<23:53:39, 158.12s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55797 <-----> Validation Dice: 0.44270\n==============================================================================================\nEpoch 57/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|▉         | 57/600 [2:28:46<23:22:50, 155.01s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5359 <-----> Average Dice score: 0.4671\nEpoch 58/600\nAverage Train Loss: 0.5366 <-----> Average Dice score: 0.4667\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|▉         | 58/600 [2:31:32<23:49:35, 158.26s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53896 <-----> Validation Dice: 0.46159\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 58, best dice: 0.46159 ========= >>>>>>>>>>>>>>           \nEpoch 59/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|▉         | 59/600 [2:33:59<23:18:34, 155.11s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5314 <-----> Average Dice score: 0.4715\nEpoch 60/600\nAverage Train Loss: 0.5326 <-----> Average Dice score: 0.4699\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|█         | 60/600 [2:36:45<23:44:14, 158.25s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55444 <-----> Validation Dice: 0.44649\n==============================================================================================\nEpoch 61/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|█         | 61/600 [2:39:13<23:13:06, 155.08s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5339 <-----> Average Dice score: 0.4686\nEpoch 62/600\nAverage Train Loss: 0.5298 <-----> Average Dice score: 0.4729\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|█         | 62/600 [2:41:58<23:37:56, 158.13s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53734 <-----> Validation Dice: 0.46324\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 62, best dice: 0.46324 ========= >>>>>>>>>>>>>>           \nEpoch 63/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  10%|█         | 63/600 [2:44:26<23:07:45, 155.06s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5289 <-----> Average Dice score: 0.4732\nEpoch 64/600\nAverage Train Loss: 0.5257 <-----> Average Dice score: 0.4762\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  11%|█         | 64/600 [2:47:11<23:33:05, 158.18s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53723 <-----> Validation Dice: 0.46329\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 64, best dice: 0.46329 ========= >>>>>>>>>>>>>>           \nEpoch 65/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  11%|█         | 65/600 [2:49:39<23:03:10, 155.12s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5258 <-----> Average Dice score: 0.4767\nEpoch 66/600\nAverage Train Loss: 0.5229 <-----> Average Dice score: 0.4795\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  11%|█         | 66/600 [2:52:25<23:29:48, 158.41s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.54362 <-----> Validation Dice: 0.45706\n==============================================================================================\nEpoch 67/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  11%|█         | 67/600 [2:54:53<22:58:57, 155.23s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5408 <-----> Average Dice score: 0.4616\nEpoch 68/600\nAverage Train Loss: 0.5258 <-----> Average Dice score: 0.4764\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  11%|█▏        | 68/600 [2:57:39<23:25:16, 158.49s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53553 <-----> Validation Dice: 0.46541\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 68, best dice: 0.46541 ========= >>>>>>>>>>>>>>           \nEpoch 69/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▏        | 69/600 [3:00:07<22:54:36, 155.32s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5253 <-----> Average Dice score: 0.4768\nEpoch 70/600\nAverage Train Loss: 0.5225 <-----> Average Dice score: 0.4799\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▏        | 70/600 [3:02:54<23:21:38, 158.68s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53637 <-----> Validation Dice: 0.46407\n==============================================================================================\nEpoch 71/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▏        | 71/600 [3:05:22<22:50:19, 155.43s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5196 <-----> Average Dice score: 0.4828\nEpoch 72/600\nAverage Train Loss: 0.5167 <-----> Average Dice score: 0.4855\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▏        | 72/600 [3:08:07<23:14:02, 158.41s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55740 <-----> Validation Dice: 0.44306\n==============================================================================================\nEpoch 73/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▏        | 73/600 [3:10:35<22:44:01, 155.30s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5230 <-----> Average Dice score: 0.4790\nEpoch 74/600\nAverage Train Loss: 0.5173 <-----> Average Dice score: 0.4844\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▏        | 74/600 [3:13:20<23:07:32, 158.28s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53197 <-----> Validation Dice: 0.46885\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 74, best dice: 0.46885 ========= >>>>>>>>>>>>>>           \nEpoch 75/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  12%|█▎        | 75/600 [3:15:48<22:36:34, 155.04s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5183 <-----> Average Dice score: 0.4833\nEpoch 76/600\nAverage Train Loss: 0.5264 <-----> Average Dice score: 0.4755\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  13%|█▎        | 76/600 [3:18:33<23:01:13, 158.16s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53690 <-----> Validation Dice: 0.46413\n==============================================================================================\nEpoch 77/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  13%|█▎        | 77/600 [3:21:01<22:31:01, 154.99s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5386 <-----> Average Dice score: 0.4631\nEpoch 78/600\nAverage Train Loss: 0.5260 <-----> Average Dice score: 0.4755\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  13%|█▎        | 78/600 [3:23:46<22:56:28, 158.22s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53351 <-----> Validation Dice: 0.46746\n==============================================================================================\nEpoch 79/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  13%|█▎        | 79/600 [3:26:14<22:26:25, 155.06s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5287 <-----> Average Dice score: 0.4735\nEpoch 80/600\nAverage Train Loss: 0.5192 <-----> Average Dice score: 0.4823\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  13%|█▎        | 80/600 [3:29:00<22:52:04, 158.32s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.56352 <-----> Validation Dice: 0.43729\n==============================================================================================\nEpoch 81/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▎        | 81/600 [3:31:28<22:22:06, 155.16s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5349 <-----> Average Dice score: 0.4666\nEpoch 82/600\nAverage Train Loss: 0.5218 <-----> Average Dice score: 0.4799\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▎        | 82/600 [3:34:14<22:46:45, 158.31s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53591 <-----> Validation Dice: 0.46475\n==============================================================================================\nEpoch 83/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▍        | 83/600 [3:36:41<22:16:51, 155.15s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5124 <-----> Average Dice score: 0.4895\nEpoch 84/600\nAverage Train Loss: 0.5108 <-----> Average Dice score: 0.4907\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▍        | 84/600 [3:39:27<22:40:36, 158.21s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.52769 <-----> Validation Dice: 0.47280\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 84, best dice: 0.47280 ========= >>>>>>>>>>>>>>           \nEpoch 85/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▍        | 85/600 [3:41:54<22:10:19, 154.99s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5091 <-----> Average Dice score: 0.4925\nEpoch 86/600\nAverage Train Loss: 0.5083 <-----> Average Dice score: 0.4932\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▍        | 86/600 [3:44:39<22:33:47, 158.03s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53135 <-----> Validation Dice: 0.46910\n==============================================================================================\nEpoch 87/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  14%|█▍        | 87/600 [3:47:07<22:04:37, 154.93s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5066 <-----> Average Dice score: 0.4949\nEpoch 88/600\nAverage Train Loss: 0.5066 <-----> Average Dice score: 0.4950\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  15%|█▍        | 88/600 [3:49:53<22:30:41, 158.28s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.52672 <-----> Validation Dice: 0.47371\n==============================================================================================\n          <<<<<<<<< ====== Saved best model at epoch 88, best dice: 0.47371 ========= >>>>>>>>>>>>>>           \nEpoch 89/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  15%|█▍        | 89/600 [3:52:21<22:01:17, 155.14s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5072 <-----> Average Dice score: 0.4943\nEpoch 90/600\nAverage Train Loss: 0.5015 <-----> Average Dice score: 0.4998\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  15%|█▌        | 90/600 [3:55:06<22:24:17, 158.15s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53106 <-----> Validation Dice: 0.46978\n==============================================================================================\nEpoch 91/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  15%|█▌        | 91/600 [3:57:34<21:55:33, 155.08s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5080 <-----> Average Dice score: 0.4935\nEpoch 92/600\nAverage Train Loss: 0.5145 <-----> Average Dice score: 0.4868\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  15%|█▌        | 92/600 [4:00:21<22:22:19, 158.54s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.52950 <-----> Validation Dice: 0.47077\n==============================================================================================\nEpoch 93/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▌        | 93/600 [4:02:48<21:52:19, 155.31s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5102 <-----> Average Dice score: 0.4910\nEpoch 94/600\nAverage Train Loss: 0.5043 <-----> Average Dice score: 0.4973\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▌        | 94/600 [4:05:33<22:14:30, 158.24s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53340 <-----> Validation Dice: 0.46752\n==============================================================================================\nEpoch 95/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▌        | 95/600 [4:08:02<21:46:49, 155.27s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5074 <-----> Average Dice score: 0.4935\nEpoch 96/600\nAverage Train Loss: 0.5102 <-----> Average Dice score: 0.4912\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▌        | 96/600 [4:10:47<22:09:16, 158.25s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.55200 <-----> Validation Dice: 0.44851\n==============================================================================================\nEpoch 97/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▌        | 97/600 [4:13:15<21:40:19, 155.11s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5113 <-----> Average Dice score: 0.4899\nEpoch 98/600\nAverage Train Loss: 0.4976 <-----> Average Dice score: 0.5039\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▋        | 98/600 [4:16:00<22:04:20, 158.29s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53766 <-----> Validation Dice: 0.46245\n==============================================================================================\nEpoch 99/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  16%|█▋        | 99/600 [4:18:28<21:35:04, 155.10s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5425 <-----> Average Dice score: 0.4593\nEpoch 100/600\nAverage Train Loss: 0.5179 <-----> Average Dice score: 0.4836\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  17%|█▋        | 100/600 [4:21:14<21:59:27, 158.33s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53992 <-----> Validation Dice: 0.46019\n==============================================================================================\nEpoch 101/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  17%|█▋        | 101/600 [4:23:42<21:30:16, 155.14s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5098 <-----> Average Dice score: 0.4911\nEpoch 102/600\nAverage Train Loss: 0.5084 <-----> Average Dice score: 0.4931\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  17%|█▋        | 102/600 [4:26:28<21:54:29, 158.37s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53067 <-----> Validation Dice: 0.46961\n==============================================================================================\nEpoch 103/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  17%|█▋        | 103/600 [4:28:55<21:25:20, 155.17s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.5044 <-----> Average Dice score: 0.4966\nEpoch 104/600\nAverage Train Loss: 0.5005 <-----> Average Dice score: 0.5009\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  17%|█▋        | 104/600 [4:31:41<21:48:14, 158.26s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53052 <-----> Validation Dice: 0.47013\n==============================================================================================\nEpoch 105/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 105/600 [4:34:08<21:19:25, 155.08s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4940 <-----> Average Dice score: 0.5071\nEpoch 106/600\nAverage Train Loss: 0.5184 <-----> Average Dice score: 0.4826\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 106/600 [4:36:54<21:42:55, 158.25s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.56125 <-----> Validation Dice: 0.43915\n==============================================================================================\nEpoch 107/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 107/600 [4:39:22<21:14:25, 155.10s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4972 <-----> Average Dice score: 0.5044\nEpoch 108/600\nAverage Train Loss: 0.4911 <-----> Average Dice score: 0.5103\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 108/600 [4:42:07<21:37:10, 158.19s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53309 <-----> Validation Dice: 0.46735\n==============================================================================================\nEpoch 109/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 109/600 [4:44:35<21:09:22, 155.12s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4883 <-----> Average Dice score: 0.5131\nEpoch 110/600\nAverage Train Loss: 0.4917 <-----> Average Dice score: 0.5094\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 110/600 [4:47:21<21:33:50, 158.43s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53972 <-----> Validation Dice: 0.46063\n==============================================================================================\nEpoch 111/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  18%|█▊        | 111/600 [4:49:49<21:05:28, 155.27s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4918 <-----> Average Dice score: 0.5091\nEpoch 112/600\nAverage Train Loss: 0.4872 <-----> Average Dice score: 0.5140\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  19%|█▊        | 112/600 [4:52:35<21:27:44, 158.33s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53122 <-----> Validation Dice: 0.46942\n==============================================================================================\nEpoch 113/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  19%|█▉        | 113/600 [4:55:03<20:59:36, 155.19s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4894 <-----> Average Dice score: 0.5117\nEpoch 114/600\nAverage Train Loss: 0.4896 <-----> Average Dice score: 0.5113\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  19%|█▉        | 114/600 [4:57:49<21:24:55, 158.63s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53163 <-----> Validation Dice: 0.46876\n==============================================================================================\nEpoch 115/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  19%|█▉        | 115/600 [5:00:17<20:55:49, 155.36s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4854 <-----> Average Dice score: 0.5160\nEpoch 116/600\nAverage Train Loss: 0.4891 <-----> Average Dice score: 0.5120\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  19%|█▉        | 116/600 [5:03:02<21:17:36, 158.38s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53510 <-----> Validation Dice: 0.46520\n==============================================================================================\nEpoch 117/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  20%|█▉        | 117/600 [5:05:31<20:50:55, 155.39s/it]","output_type":"stream"},{"name":"stdout","text":"Average Train Loss: 0.4831 <-----> Average Dice score: 0.5183\nEpoch 118/600\nAverage Train Loss: 0.4905 <-----> Average Dice score: 0.5108\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  20%|█▉        | 118/600 [5:08:16<21:12:36, 158.42s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.53869 <-----> Validation Dice: 0.46183\n==============================================================================================\nEpoch 119/600\n","output_type":"stream"},{"name":"stderr","text":"epoching...:  20%|█▉        | 119/600 [5:10:44<20:44:39, 155.26s/it]","output_type":"stream"}]},{"cell_type":"markdown","source":"## config 2","metadata":{}},{"cell_type":"code","source":"train_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),  EnsureChannelFirstD(keys=[\"image\", \"mask\"]),\n                            BinaryMaskTransform(keys=[\"mask\"], class_value=1), EnsureTyped(keys=[\"image\", \"mask\"])])\nvalid_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"), EnsureChannelFirstD(keys=[\"image\", \"mask\"]), \n                            BinaryMaskTransform(keys=[\"mask\"], class_value=1), EnsureTyped(keys=[\"image\", \"mask\"])])\n\ntrain_files, valid_files = split_data(60)\n\ntrain_ds = CacheDataset(data=train_files, transform=train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4)\n\nvalid_ds = CacheDataset(data=valid_files, transform=train_transforms)\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4)","metadata":{"execution":{"iopub.status.busy":"2024-09-20T09:30:05.420844Z","iopub.execute_input":"2024-09-20T09:30:05.421250Z","iopub.status.idle":"2024-09-20T09:31:32.885305Z","shell.execute_reply.started":"2024-09-20T09:30:05.421213Z","shell.execute_reply":"2024-09-20T09:31:32.884263Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stderr","text":"Loading dataset: 100%|██████████| 60/60 [01:14<00:00,  1.25s/it]\nLoading dataset: 100%|██████████| 10/10 [00:12<00:00,  1.26s/it]\n","output_type":"stream"}]},{"cell_type":"code","source":"def save_checkpoint(path, model, optimizer, scheduler, epoch, best_metric):\n    torch.save({\n        'epoch': epoch,\n        'model_state_dict': model.state_dict(),\n        'optimizer_state_dict': optimizer.state_dict(),\n        'scheduler_state_dict': scheduler.state_dict(),\n        'best_metric': best_metric,  # Save the best metric so far\n    }, path)\n    print(f\"Checkpoint saved...\")\n    \n\n\ndef load_checkpoint(path, model, optimizer, scheduler):\n    global best_metric, best_metric_epoch\n    if os.path.exists(path):\n        checkpoint = torch.load(path)\n        model.load_state_dict(checkpoint['model_state_dict'])\n        optimizer.load_state_dict(checkpoint['optimizer_state_dict'])\n        scheduler.load_state_dict(checkpoint['scheduler_state_dict'])\n\n        # Handle cases where 'best_metric' might not be present in the checkpoint\n        best_metric = checkpoint.get('best_metric', best_metric)  # Load best_metric if it exists, else use current value\n\n        # Safely print best_metric whether it's available or not\n        if isinstance(best_metric, (int, float)):\n            print(f\"Resumed from checkpoint '{path}' with best Dice: {best_metric:.5f}\")\n        else:\n            print(f\"Resumed from checkpoint '{path}' but best Dice is not available\")\n\n        # Adjust the learning rate to the correct value after resuming from the checkpoint\n        for param_group in optimizer.param_groups:\n            param_group['lr'] = scheduler.optimizer.param_groups[0]['lr']\n        print(f\"Learning rate manually adjusted to: {optimizer.param_groups[0]['lr']} after checkpoint reload\")\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:43:55.981787Z","iopub.execute_input":"2024-09-26T08:43:55.982183Z","iopub.status.idle":"2024-09-26T08:43:55.992073Z","shell.execute_reply.started":"2024-09-26T08:43:55.982145Z","shell.execute_reply":"2024-09-26T08:43:55.991161Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm\nfrom monai.inferers import SlidingWindowInferer\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch\nimport os\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 1\nmodel = UNet(spatial_dims=3, in_channels=1, out_channels=num_classes, channels=(64, 128, 256, 512),\n             strides=(2, 2, 2, 2), num_res_units=4, dropout=0.1).to(device)\n\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\nloss_function = DiceLoss(include_background=True, to_onehot_y=False, sigmoid=True)\n\noptimizer = torch.optim.Adam(model.parameters(), lr=0.05)\nscheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n\ninferer = SlidingWindowInferer(roi_size=(64, 64, 64), sw_batch_size=16, overlap=0.04)\npost_pred = Compose([Activations(sigmoid=True), AsDiscrete(threshold=0.5)])\npost_label = Compose([AsDiscrete()])\n\nmax_epochs = 600\nval_interval = 1\nbest_metric = -1\nbest_metric_epoch = -1\nbest_checkpoint_path = \"v0.pth\"\nprevious_lr = optimizer.param_groups[0]['lr']\n\nif os.path.exists(best_checkpoint_path):\n    load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n\nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"\\nEpoch {epoch + 1}/{max_epochs}\")\n    print(f\"Current Learning Rate = {optimizer.param_groups[0]['lr']}\")\n\n    model.train()\n    epoch_loss = 0\n    step = 0\n    dice = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n        outputs = inferer(inputs, model)\n\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        epoch_loss += loss.item()\n\n        outputs = post_pred(outputs)\n        labels = post_label(labels)\n\n        dice_metric(y_pred=outputs, y=labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n\n    epoch_loss /= step\n    dice /= step\n    \n    print(f\"Average Train Loss: {epoch_loss:.4f} <-----> Average Dice score: {dice:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            val_steps = 0\n            dice = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n                val_outputs = inferer(val_inputs, model)\n\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                val_outputs = post_pred(val_outputs)\n                val_labels = post_label(val_labels)\n\n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                dice_metric.reset()\n\n            val_loss /= val_steps\n            dice /= val_steps\n            scheduler.step(val_loss)\n            \n            print(f\"Validation loss: {val_loss:.5f} <-----> Validation Dice: {dice:.5f}\")\n            print('==============================================================================================')\n\n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                save_checkpoint(best_checkpoint_path, model, optimizer, scheduler, epoch + 1, best_metric)\n                print(f\"          <<<<<<<<< ====== Saved best model at epoch {best_metric_epoch}, best dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>           \")\n\n    current_lr = optimizer.param_groups[0]['lr']\n    if current_lr < previous_lr:\n        print(f\"Learning rate reduced from {previous_lr} to {current_lr}. Reloading the best model checkpoint.\")\n        load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n        \n    previous_lr = current_lr\n\nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-20T13:39:20.473580Z","iopub.execute_input":"2024-09-20T13:39:20.473967Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Resumed from checkpoint 'v0.pth' with best Dice: -1.00000\nLearning rate manually adjusted to: 0.1 after checkpoint reload\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch 1/600\nCurrent Learning Rate = 0.1\nAverage Train Loss: 0.9715 <-----> Average Dice score: 0.0303\nValidation loss: 0.99279 <-----> Validation Dice: 0.00733\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 1/600 [03:29<34:53:28, 209.70s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 1, best dice: 0.00733 ========= >>>>>>>>>>>>>>           \nEpoch 2/600\nCurrent Learning Rate = 0.1\nAverage Train Loss: 0.9928 <-----> Average Dice score: 0.0073\nValidation loss: 0.99279 <-----> Validation Dice: 0.00733\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 2/600 [06:58<34:47:35, 209.46s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 2, best dice: 0.00733 ========= >>>>>>>>>>>>>>           \nEpoch 3/600\nCurrent Learning Rate = 0.1\nAverage Train Loss: 0.9926 <-----> Average Dice score: 0.0075\nValidation loss: 0.99259 <-----> Validation Dice: 0.00754\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 3/600 [10:28<34:42:30, 209.30s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 3, best dice: 0.00754 ========= >>>>>>>>>>>>>>           \nEpoch 4/600\nCurrent Learning Rate = 0.05\nAverage Train Loss: 0.9924 <-----> Average Dice score: 0.0077\nValidation loss: 0.99240 <-----> Validation Dice: 0.00774\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 4/600 [13:57<34:38:01, 209.20s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 4, best dice: 0.00774 ========= >>>>>>>>>>>>>>           \nEpoch 5/600\nCurrent Learning Rate = 0.05\nAverage Train Loss: 0.9922 <-----> Average Dice score: 0.0079\nValidation loss: 0.99216 <-----> Validation Dice: 0.00801\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 5/600 [17:26<34:34:16, 209.17s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 5, best dice: 0.00801 ========= >>>>>>>>>>>>>>           \nEpoch 6/600\nCurrent Learning Rate = 0.05\nAverage Train Loss: 0.9919 <-----> Average Dice score: 0.0082\nValidation loss: 0.99184 <-----> Validation Dice: 0.00832\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 6/600 [20:55<34:30:24, 209.13s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 6, best dice: 0.00832 ========= >>>>>>>>>>>>>>           \nEpoch 7/600\nCurrent Learning Rate = 0.05\nAverage Train Loss: 0.9915 <-----> Average Dice score: 0.0086\nValidation loss: 0.99114 <-----> Validation Dice: 0.00907\n==============================================================================================\nCheckpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 7, best dice: 0.00907 ========= >>>>>>>>>>>>>>           \nLearning rate reduced from 0.05 to 0.025. Reloading the best model checkpoint.\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 7/600 [24:24<34:27:56, 209.24s/it]","output_type":"stream"},{"name":"stdout","text":"Resumed from checkpoint 'v0.pth' with best Dice: 0.00907\nLearning rate manually adjusted to: 0.025 after checkpoint reload\nEpoch 8/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.9909 <-----> Average Dice score: 0.0093\nValidation loss: 0.99019 <-----> Validation Dice: 0.01015\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|▏         | 8/600 [27:53<34:24:11, 209.21s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 8, best dice: 0.01015 ========= >>>>>>>>>>>>>>           \nEpoch 9/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.9895 <-----> Average Dice score: 0.0108\nValidation loss: 0.98744 <-----> Validation Dice: 0.01305\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 9/600 [31:23<34:20:53, 209.23s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 9, best dice: 0.01305 ========= >>>>>>>>>>>>>>           \nEpoch 10/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.9621 <-----> Average Dice score: 0.0441\nValidation loss: 0.88051 <-----> Validation Dice: 0.12621\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 10/600 [34:52<34:16:19, 209.12s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 10, best dice: 0.12621 ========= >>>>>>>>>>>>>>           \nEpoch 11/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.8849 <-----> Average Dice score: 0.1417\nValidation loss: 0.77612 <-----> Validation Dice: 0.27175\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 11/600 [38:21<34:12:21, 209.07s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 11, best dice: 0.27175 ========= >>>>>>>>>>>>>>           \nEpoch 12/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.8880 <-----> Average Dice score: 0.1254\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 12/600 [41:49<34:06:04, 208.78s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.83574 <-----> Validation Dice: 0.16567\n==============================================================================================\nEpoch 13/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.7733 <-----> Average Dice score: 0.2385\nValidation loss: 0.69254 <-----> Validation Dice: 0.31956\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 13/600 [45:18<34:04:04, 208.93s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 13, best dice: 0.31956 ========= >>>>>>>>>>>>>>           \nEpoch 14/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.7133 <-----> Average Dice score: 0.2950\nValidation loss: 0.68047 <-----> Validation Dice: 0.32083\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▏         | 14/600 [48:47<34:01:15, 209.00s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 14, best dice: 0.32083 ========= >>>>>>>>>>>>>>           \nEpoch 15/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6987 <-----> Average Dice score: 0.3092\nValidation loss: 0.66632 <-----> Validation Dice: 0.34544\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   2%|▎         | 15/600 [52:16<33:58:04, 209.03s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 15, best dice: 0.34544 ========= >>>>>>>>>>>>>>           \nEpoch 16/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6909 <-----> Average Dice score: 0.3152\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 16/600 [55:44<33:52:04, 208.78s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.66938 <-----> Validation Dice: 0.33170\n==============================================================================================\nEpoch 17/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6659 <-----> Average Dice score: 0.3385\nValidation loss: 0.64304 <-----> Validation Dice: 0.35953\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 17/600 [59:13<33:49:19, 208.85s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 17, best dice: 0.35953 ========= >>>>>>>>>>>>>>           \nEpoch 18/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6452 <-----> Average Dice score: 0.3577\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 18/600 [1:02:42<33:44:32, 208.72s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.64862 <-----> Validation Dice: 0.35302\n==============================================================================================\nEpoch 19/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6482 <-----> Average Dice score: 0.3557\nValidation loss: 0.63745 <-----> Validation Dice: 0.36618\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 19/600 [1:06:11<33:42:19, 208.85s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 19, best dice: 0.36618 ========= >>>>>>>>>>>>>>           \nEpoch 20/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6511 <-----> Average Dice score: 0.3533\nValidation loss: 0.62726 <-----> Validation Dice: 0.37494\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   3%|▎         | 20/600 [1:09:40<33:39:44, 208.94s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 20, best dice: 0.37494 ========= >>>>>>>>>>>>>>           \nEpoch 21/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6304 <-----> Average Dice score: 0.3734\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▎         | 21/600 [1:13:08<33:33:40, 208.67s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62853 <-----> Validation Dice: 0.37348\n==============================================================================================\nEpoch 22/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6336 <-----> Average Dice score: 0.3706\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▎         | 22/600 [1:16:36<33:28:30, 208.50s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.63194 <-----> Validation Dice: 0.36995\n==============================================================================================\nEpoch 23/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6206 <-----> Average Dice score: 0.3824\nValidation loss: 0.62345 <-----> Validation Dice: 0.37908\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 23/600 [1:20:05<33:26:53, 208.69s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 23, best dice: 0.37908 ========= >>>>>>>>>>>>>>           \nEpoch 24/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6201 <-----> Average Dice score: 0.3834\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 24/600 [1:23:34<33:22:47, 208.62s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62465 <-----> Validation Dice: 0.37786\n==============================================================================================\nEpoch 25/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6234 <-----> Average Dice score: 0.3800\nValidation loss: 0.62188 <-----> Validation Dice: 0.38118\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 25/600 [1:27:03<33:20:19, 208.73s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 25, best dice: 0.38118 ========= >>>>>>>>>>>>>>           \nEpoch 26/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6204 <-----> Average Dice score: 0.3821\nValidation loss: 0.62003 <-----> Validation Dice: 0.38201\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 26/600 [1:30:32<33:18:29, 208.90s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 26, best dice: 0.38201 ========= >>>>>>>>>>>>>>           \nEpoch 27/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6161 <-----> Average Dice score: 0.3869\nValidation loss: 0.61734 <-----> Validation Dice: 0.38490\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   4%|▍         | 27/600 [1:34:01<33:15:30, 208.95s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 27, best dice: 0.38490 ========= >>>>>>>>>>>>>>           \nEpoch 28/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6281 <-----> Average Dice score: 0.3742\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▍         | 28/600 [1:37:30<33:10:27, 208.79s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62122 <-----> Validation Dice: 0.38036\n==============================================================================================\nEpoch 29/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6165 <-----> Average Dice score: 0.3866\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▍         | 29/600 [1:40:58<33:06:43, 208.76s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.63371 <-----> Validation Dice: 0.36787\n==============================================================================================\nEpoch 30/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6147 <-----> Average Dice score: 0.3882\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▌         | 30/600 [1:44:27<33:03:19, 208.77s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62236 <-----> Validation Dice: 0.38019\n==============================================================================================\nEpoch 31/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6087 <-----> Average Dice score: 0.3940\nValidation loss: 0.61239 <-----> Validation Dice: 0.38875\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▌         | 31/600 [1:47:56<33:01:23, 208.93s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 31, best dice: 0.38875 ========= >>>>>>>>>>>>>>           \nEpoch 32/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6013 <-----> Average Dice score: 0.4012\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   5%|▌         | 32/600 [1:51:25<32:56:02, 208.74s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62583 <-----> Validation Dice: 0.37557\n==============================================================================================\nEpoch 33/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5984 <-----> Average Dice score: 0.4035\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 33/600 [1:54:53<32:51:14, 208.60s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61433 <-----> Validation Dice: 0.38654\n==============================================================================================\nEpoch 34/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5948 <-----> Average Dice score: 0.4072\nValidation loss: 0.60877 <-----> Validation Dice: 0.39395\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 34/600 [1:58:22<32:49:23, 208.77s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 34, best dice: 0.39395 ========= >>>>>>>>>>>>>>           \nEpoch 35/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5980 <-----> Average Dice score: 0.4041\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 35/600 [2:01:50<32:44:01, 208.57s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61516 <-----> Validation Dice: 0.38745\n==============================================================================================\nEpoch 36/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5986 <-----> Average Dice score: 0.4034\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 36/600 [2:05:19<32:40:26, 208.56s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.60772 <-----> Validation Dice: 0.39306\n==============================================================================================\nEpoch 37/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6029 <-----> Average Dice score: 0.3996\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▌         | 37/600 [2:08:47<32:36:54, 208.55s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61264 <-----> Validation Dice: 0.38835\n==============================================================================================\nEpoch 38/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5972 <-----> Average Dice score: 0.4052\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▋         | 38/600 [2:12:15<32:32:12, 208.42s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61224 <-----> Validation Dice: 0.38956\n==============================================================================================\nEpoch 39/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5946 <-----> Average Dice score: 0.4070\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   6%|▋         | 39/600 [2:15:44<32:29:07, 208.46s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62650 <-----> Validation Dice: 0.37404\n==============================================================================================\nEpoch 40/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6041 <-----> Average Dice score: 0.3990\nValidation loss: 0.61146 <-----> Validation Dice: 0.38977\n==============================================================================================\nLearning rate reduced from 0.025 to 0.0125. Reloading the best model checkpoint.\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 40/600 [2:19:13<32:27:04, 208.61s/it]","output_type":"stream"},{"name":"stdout","text":"Resumed from checkpoint 'v0.pth' with best Dice: 0.39395\nLearning rate manually adjusted to: 0.025 after checkpoint reload\nEpoch 41/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5991 <-----> Average Dice score: 0.4043\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 41/600 [2:22:41<32:22:38, 208.51s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61451 <-----> Validation Dice: 0.38645\n==============================================================================================\nEpoch 42/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.5977 <-----> Average Dice score: 0.4039\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 42/600 [2:26:10<32:18:48, 208.47s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.62365 <-----> Validation Dice: 0.37776\n==============================================================================================\nEpoch 43/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6027 <-----> Average Dice score: 0.3995\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 43/600 [2:29:38<32:14:55, 208.43s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61722 <-----> Validation Dice: 0.38565\n==============================================================================================\nEpoch 44/600\nCurrent Learning Rate = 0.025\nAverage Train Loss: 0.6097 <-----> Average Dice score: 0.3934\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   7%|▋         | 44/600 [2:33:06<32:10:32, 208.33s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61541 <-----> Validation Dice: 0.38771\n==============================================================================================\nEpoch 45/600\nCurrent Learning Rate = 0.0125\nAverage Train Loss: 0.5990 <-----> Average Dice score: 0.4027\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 45/600 [2:36:35<32:07:52, 208.42s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.61236 <-----> Validation Dice: 0.38885\n==============================================================================================\nEpoch 46/600\nCurrent Learning Rate = 0.0125\nAverage Train Loss: 0.5871 <-----> Average Dice score: 0.4149\nValidation loss: 0.60668 <-----> Validation Dice: 0.39411\n==============================================================================================\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   8%|▊         | 46/600 [2:40:04<32:07:03, 208.71s/it]","output_type":"stream"},{"name":"stdout","text":"Checkpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 46, best dice: 0.39411 ========= >>>>>>>>>>>>>>           \nEpoch 47/600\nCurrent Learning Rate = 0.0125\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## SegResNet","metadata":{}},{"cell_type":"code","source":"train_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"),  EnsureChannelFirstD(keys=[\"image\", \"mask\"]),\n                            BinaryMaskTransform(keys=[\"mask\"], class_value=1), EnsureTyped(keys=[\"image\", \"mask\"])])\nvalid_transforms = Compose([ LoadImageD(keys=[\"image\", \"mask\"], reader=\"NibabelReader\"), EnsureChannelFirstD(keys=[\"image\", \"mask\"]), \n                            BinaryMaskTransform(keys=[\"mask\"], class_value=1), EnsureTyped(keys=[\"image\", \"mask\"])])\n\ntrain_files, valid_files = split_data(60)\n\ntrain_ds = CacheDataset(data=train_files, transform=train_transforms)\ntrain_loader = DataLoader(train_ds, batch_size=1, shuffle=True, num_workers=4)\n\nvalid_ds = CacheDataset(data=valid_files, transform=train_transforms)\nval_loader = DataLoader(valid_ds, batch_size=1, shuffle=False, num_workers=4)","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:38:43.402222Z","iopub.execute_input":"2024-09-26T08:38:43.402601Z","iopub.status.idle":"2024-09-26T08:39:40.691025Z","shell.execute_reply.started":"2024-09-26T08:38:43.402543Z","shell.execute_reply":"2024-09-26T08:39:40.690052Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"Loading dataset: 100%|██████████| 60/60 [00:49<00:00,  1.21it/s]\nLoading dataset: 100%|██████████| 10/10 [00:07<00:00,  1.28it/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"from tqdm import tqdm\nfrom monai.inferers import SlidingWindowInferer\nfrom monai.networks.nets import SegResNet\nfrom monai.optimizers import Novograd\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nimport torch\nimport os\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_classes = 1\nmodel = SegResNet(spatial_dims=3, in_channels=1, out_channels=num_classes, init_filters=16,  \n    blocks_down=(1, 2, 2, 4),  blocks_up=(1, 1, 1), dropout_prob=0.2 ).to(device)\n\ndice_metric = DiceMetric(include_background=True, reduction=\"mean\")\nloss_function = DiceLoss(include_background=True, to_onehot_y=False, sigmoid=True)\n\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\nscheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, verbose=True)\n\ninferer = SlidingWindowInferer(roi_size=(64, 64, 64), sw_batch_size=16, overlap=0.04)\npost_pred = Compose([Activations(sigmoid=True), AsDiscrete(threshold=0.5)])\npost_label = Compose([AsDiscrete()])\n\nmax_epochs = 600\nval_interval = 1\nbest_metric = -1\nbest_metric_epoch = -1\nbest_checkpoint_path = \"v0.pth\"\nprevious_lr = optimizer.param_groups[0]['lr']\n\nif os.path.exists(best_checkpoint_path):\n    load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n\nfor epoch in tqdm(range(max_epochs), 'epoching...'):\n    print(f\"\\nEpoch {epoch + 1}/{max_epochs}\")\n    print(f\"Current Learning Rate = {optimizer.param_groups[0]['lr']}\")\n\n    model.train()\n    epoch_loss = 0\n    step = 0\n    dice = 0\n\n    for batch_data in train_loader:\n        step += 1\n        inputs, labels = batch_data[\"image\"].to(device), batch_data[\"mask\"].to(device)\n        optimizer.zero_grad()\n        outputs = inferer(inputs, model)\n\n        loss = loss_function(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        epoch_loss += loss.item()\n\n        outputs = post_pred(outputs)\n        labels = post_label(labels)\n\n        dice_metric(y_pred=outputs, y=labels)\n        dice += dice_metric.aggregate().item()\n        dice_metric.reset()\n\n    epoch_loss /= step\n    dice /= step\n    \n    print(f\"Average Train Loss: {epoch_loss:.4f} <-----> Average Dice score: {dice:.4f}\")\n\n    if (epoch + 1) % val_interval == 0:\n        model.eval()\n        with torch.no_grad():\n            val_loss = 0\n            val_steps = 0\n            dice = 0\n\n            for val_data in val_loader:\n                val_steps += 1\n                val_inputs, val_labels = val_data[\"image\"].to(device), val_data[\"mask\"].to(device)\n                val_outputs = inferer(val_inputs, model)\n\n                val_loss += loss_function(val_outputs, val_labels).item()\n\n                val_outputs = post_pred(val_outputs)\n                val_labels = post_label(val_labels)\n\n                dice_metric(y_pred=val_outputs, y=val_labels)\n                dice += dice_metric.aggregate().item()\n                dice_metric.reset()\n\n            val_loss /= val_steps\n            dice /= val_steps\n            scheduler.step(val_loss)\n            \n            print(f\"Validation loss: {val_loss:.5f} <-----> Validation Dice: {dice:.5f}\")\n            print('==============================================================================================')\n\n            if dice > best_metric:\n                best_metric = dice\n                best_metric_epoch = epoch + 1\n                save_checkpoint(best_checkpoint_path, model, optimizer, scheduler, epoch + 1, best_metric)\n                print(f\"          <<<<<<<<< ====== Saved best model at epoch {best_metric_epoch}, best dice: {best_metric:.5f} ========= >>>>>>>>>>>>>>           \")\n\n    current_lr = optimizer.param_groups[0]['lr']\n    if current_lr < previous_lr:\n        print(f\"Learning rate reduced from {previous_lr} to {current_lr}. Reloading the best model checkpoint.\")\n        load_checkpoint(best_checkpoint_path, model, optimizer, scheduler)\n        \n    previous_lr = current_lr\n\nprint(f\"Training completed, best metric: {best_metric:.5f} at epoch {best_metric_epoch}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-26T08:44:02.224841Z","iopub.execute_input":"2024-09-26T08:44:02.225244Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"epoching...:   0%|          | 0/600 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"\nEpoch 1/600\nCurrent Learning Rate = 0.01\nAverage Train Loss: 0.9977 <-----> Average Dice score: 0.0028\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 1/600 [03:12<31:58:44, 192.19s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99105 <-----> Validation Dice: 0.00934\n==============================================================================================\nCheckpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 1, best dice: 0.00934 ========= >>>>>>>>>>>>>>           \n\nEpoch 2/600\nCurrent Learning Rate = 0.01\nAverage Train Loss: 0.9963 <-----> Average Dice score: 0.0049\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 2/600 [06:24<31:58:29, 192.49s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.97050 <-----> Validation Dice: 0.05574\n==============================================================================================\nCheckpoint saved...\n          <<<<<<<<< ====== Saved best model at epoch 2, best dice: 0.05574 ========= >>>>>>>>>>>>>>           \n\nEpoch 3/600\nCurrent Learning Rate = 0.01\nAverage Train Loss: 0.9958 <-----> Average Dice score: 0.0067\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   0%|          | 3/600 [09:36<31:53:02, 192.27s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.99254 <-----> Validation Dice: 0.00782\n==============================================================================================\n\nEpoch 4/600\nCurrent Learning Rate = 0.01\nAverage Train Loss: 0.9972 <-----> Average Dice score: 0.0029\n","output_type":"stream"},{"name":"stderr","text":"epoching...:   1%|          | 4/600 [12:49<31:50:01, 192.28s/it]","output_type":"stream"},{"name":"stdout","text":"Validation loss: 0.98889 <-----> Validation Dice: 0.01134\n==============================================================================================\n\nEpoch 5/600\nCurrent Learning Rate = 0.01\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}